<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>文本省略的方法</title>
      <link href="2021/09/04/wen-ben-sheng-lue/"/>
      <url>2021/09/04/wen-ben-sheng-lue/</url>
      
        <content type="html"><![CDATA[<p>在列表页对商品介绍时，经常需要对商品进行简略描述，如果将多余一行的文字用省略号代替呢？以下是笔者试过的两种可行方案：</p><ul><li>方法一</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>-webkit-line-clamp: <span class="hljs-number">1</span>;    //省略行数 可设置其他值<br>    <span class="hljs-attribute">display</span>: -webkit-box;<br>    <span class="hljs-attribute">word-break</span>: break-all;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    -webkit-box-orient: vertical;<br></code></pre></td></tr></tbody></table></figure><ul><li>方法二</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>  <span class="hljs-selector-class">.line</span>{<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>    <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  }<br>//多行<br>  <span class="hljs-selector-class">.multi-line</span> {<br>    <span class="hljs-attribute">display</span>: -webkit-box;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<br>    -webkit-box-orient: vertical;<br>    -webkit-line-clamp: <span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>  }<br>&lt;/style&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class="line"&gt;<br>  单行文本省略样例<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class="multi-line"&gt;<br>  多行文本省略样例<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Webpack5.0搭建React环境</title>
      <link href="2021/08/05/webpack5.0-zhong-react-huan-jing-da-jian/"/>
      <url>2021/08/05/webpack5.0-zhong-react-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Webpack介绍"><a href="#Webpack介绍" class="headerlink" title="Webpack介绍"></a>Webpack介绍</h2><p>常识: 目前市场还在使用v4</p><p>趋势: v5简单很多, 性能更好 ; vite呼声很高</p><p>相关: rollup, gulp….</p><p>知识: 入口, 出口, loaders, plugins, WDS, HMR, 生产与开发分离</p><p>扩展: 工程层面的性能( 代码打包优化, 构建速度优化 )</p><h3 id="项目文件结构"><a href="#项目文件结构" class="headerlink" title="项目文件结构"></a>项目文件结构</h3><figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">react-cnode              <br>├─ config                <br>│  ├─ webpack<span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.js</span>  <br>│  ├─ webpack<span class="hljs-selector-class">.dev</span><span class="hljs-selector-class">.js</span>     <br>│  └─ webpack<span class="hljs-selector-class">.prod</span><span class="hljs-selector-class">.js</span>    <br>├─ public                <br>│  ├─ favicon<span class="hljs-selector-class">.ico</span>        <br>│  └─ index<span class="hljs-selector-class">.html</span>         <br>├─ <span class="hljs-attribute">src</span>                   <br>│  ├─ App<span class="hljs-selector-class">.jsx</span>            <br>│  └─ <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span>            <br>├─ README<span class="hljs-selector-class">.md</span>             <br>├─ babel<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.json</span>     <br>├─ package-lock<span class="hljs-selector-class">.json</span>     <br>└─ package<span class="hljs-selector-class">.json</span>          <br><br></code></pre></td></tr></tbody></table></figure><h3 id="需要安装的包"><a href="#需要安装的包" class="headerlink" title="需要安装的包"></a>需要安装的包</h3><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">webpack-merge <br>eslint-webpack-plugin<br>html-webpack-plugin <span class="hljs-regexp">//</span>   npm i --save-dev html-webpack-plugin<br>mini-css-extract-plugin<br>@babel/preset-env<br>@babel/preset-react<br>webpack-dev-server  <span class="hljs-regexp">//</span> 使用devServer  serve命令<br>progress-webpack-plugin  <span class="hljs-regexp">//</span>构建,进度显示百分比%<br>happypack  <span class="hljs-regexp">//</span>加速构建<br>npm install -D babel-loader @babel<span class="hljs-regexp">/core @babel/</span>preset-env webpack  <span class="hljs-regexp">//</span> babel编译器<br><br>eslint-plugin-react<br></code></pre></td></tr></tbody></table></figure><h5 id="App-jsx"><a href="#App-jsx" class="headerlink" title="App.jsx"></a>App.jsx</h5><figure class="highlight jsx"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>{<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello webpack<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>}<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App<br><br></code></pre></td></tr></tbody></table></figure><h5 id="mian-js"><a href="#mian-js" class="headerlink" title="mian.js"></a>mian.js</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">"react-dom"</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.jsx'</span>;<br><br><br>ReactDOM.render(<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span>,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)<br>);<br><br></code></pre></td></tr></tbody></table></figure><h5 id="config-webpack-prod-js"><a href="#config-webpack-prod-js" class="headerlink" title="config/webpack.prod.js"></a>config/webpack.prod.js</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> {<br>  merge<br>} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-merge'</span>);<br><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./webpack.common.js'</span>);<br><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">"mini-css-extract-plugin"</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>)<br><span class="hljs-built_in">module</span>.exports = merge(common, {<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">'production'</span>,<br>  <span class="hljs-attr">devtool</span>: <span class="hljs-string">'source-map'</span>,<br>  <span class="hljs-attr">module</span>: {<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// css文件处理</span><br>      {<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(sa|sc|c)ss$/</span>,<br>        use: [<br>          MiniCssExtractPlugin.loader,<br>          <span class="hljs-string">"css-loader"</span>,<br>          <span class="hljs-string">"postcss-loader"</span>,<br>          <span class="hljs-string">"sass-loader"</span>,<br>        ],<br>      },<br>      <span class="hljs-comment">// 图片压缩</span><br>      {<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(gif|png|jpe?g|svg)$/i</span>,<br>        use: [<br>          <span class="hljs-string">'file-loader'</span>,<br>          {<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">'image-webpack-loader'</span>,<br>            <span class="hljs-attr">options</span>: {},<br>          },<br>        ],<br>      },<br>    ],<br>  },<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// css文件抽离 - 生产环境</span><br>    <span class="hljs-keyword">new</span> MiniCssExtractPlugin({<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">'./static/css/[name].[chunkhash].css'</span>,<br>      <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">'[id].[chunkhash].css'</span>,<br>    }),<br>    <span class="hljs-keyword">new</span> HtmlWebpackPlugin({<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">"development"</span>,<br>      <span class="hljs-attr">template</span>: <span class="hljs-string">'./public/index.html'</span>,<br>      <span class="hljs-attr">favicon</span>: <span class="hljs-string">"./public/favicon.ico"</span>,<br>      <span class="hljs-attr">scriptLoading</span>: <span class="hljs-string">"blocking"</span>,<br>      <span class="hljs-attr">inject</span>: <span class="hljs-string">"body"</span>,<br>    }),<br>  ],<br>  <span class="hljs-comment">//   treeShaking</span><br>});<br></code></pre></td></tr></tbody></table></figure><h5 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> {<br>    merge<br>} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-merge'</span>);<br><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./webpack.common.js'</span>);<br><span class="hljs-keyword">const</span> ESLintPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'eslint-webpack-plugin'</span>);<br><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>)<br><br><span class="hljs-built_in">module</span>.exports = merge(common, {<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">'development'</span>,<br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">'inline-source-map'</span>,<br>    <span class="hljs-attr">devServer</span>: {<br>        <span class="hljs-attr">contentBase</span>: <span class="hljs-string">'./public'</span>,<br>        <span class="hljs-attr">port</span>: <span class="hljs-number">9002</span>,<br>        <span class="hljs-attr">hot</span>: <span class="hljs-literal">true</span>,<br>    },<br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> HtmlWebpackPlugin({<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">"development"</span>,<br>            <span class="hljs-attr">template</span>: <span class="hljs-string">'./public/index.html'</span>,<br>            <span class="hljs-attr">favicon</span>: <span class="hljs-string">"./public/favicon.ico"</span>,<br>            <span class="hljs-comment">// scriptLoading: "blocking",</span><br>            <span class="hljs-comment">// inject: "body",</span><br>          }),<br>        <span class="hljs-keyword">new</span> ESLintPlugin({<br>            <span class="hljs-attr">extensions</span>: [<span class="hljs-string">'js'</span>, <span class="hljs-string">'jsx'</span>],<br>            <span class="hljs-attr">exclude</span>: <span class="hljs-string">'node_modules'</span>,<br>            <span class="hljs-attr">threads</span>: <span class="hljs-literal">false</span><br>          }),<br>    ],<br>    <span class="hljs-attr">module</span>: {<br>        <span class="hljs-attr">rules</span>: [<br>            <span class="hljs-comment">// css文件解析</span><br>            {<br>              <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(sa|sc|c)ss$/</span>,<br>              use: [<span class="hljs-string">'style-loader'</span>, <span class="hljs-string">'css-loader'</span>,<span class="hljs-string">"sass-loader"</span>]<br>            },<br>            <span class="hljs-comment">// 图片解析</span><br>            {<br>              <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,<br>              type: <span class="hljs-string">'asset/resource'</span><br>            },<br>          ],<br>    }<br>});<br></code></pre></td></tr></tbody></table></figure><h5 id="webpack-common-js"><a href="#webpack-common-js" class="headerlink" title="webpack.common.js"></a>webpack.common.js</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>)<br><span class="hljs-keyword">const</span> ProgressPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'progress-webpack-plugin'</span>)<br><span class="hljs-keyword">const</span> HappyPack = <span class="hljs-built_in">require</span>(<span class="hljs-string">'happypack'</span>);<br><span class="hljs-comment">// const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;</span><br><span class="hljs-comment">// const {</span><br><span class="hljs-comment">//     VueLoaderPlugin</span><br><span class="hljs-comment">// } = require('vue-loader')</span><br><br><span class="hljs-built_in">module</span>.exports = {<br><br>    <span class="hljs-attr">entry</span>: {<br>        <span class="hljs-comment">// 文件抽离</span><br>        <span class="hljs-string">'react-vendors'</span>: [<span class="hljs-string">'react'</span>, <span class="hljs-string">'react-dom'</span>],<br>        <span class="hljs-attr">app</span>: {<br>          <span class="hljs-comment">// import: './src/index.js',</span><br>          <span class="hljs-attr">import</span>: path.resolve(__dirname,<span class="hljs-string">'../src/main.js'</span>),<br>          <span class="hljs-attr">dependOn</span>: <span class="hljs-string">'react-vendors'</span><br>        },<br>      },<br>      <span class="hljs-attr">output</span>: {<br>        <span class="hljs-comment">// 要使用相对路径</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">'./static/js/[name].[chunkhash].js'</span>,<br>        <span class="hljs-comment">// filename: './static/js/[name].js',</span><br>    <br>        <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">'../dist'</span>),<br>        <span class="hljs-comment">// 外部服务器serve</span><br>        <span class="hljs-comment">// publicPath: '/',</span><br>        <span class="hljs-attr">clean</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// charset:true</span><br>        <span class="hljs-attr">chunkFilename</span>: <span class="hljs-string">'[id].js'</span><br>      },<br>      <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-comment">// new BundleAnalyzerPlugin()</span><br>        <span class="hljs-keyword">new</span> HappyPack({<br>          <span class="hljs-attr">loaders</span>: [<span class="hljs-string">'babel-loader'</span>]<br>        }),<br>        <span class="hljs-keyword">new</span> ProgressPlugin(<span class="hljs-literal">true</span>)<br>      ],<br>      <span class="hljs-attr">module</span>: {<br>        <span class="hljs-attr">rules</span>: [ <span class="hljs-comment">// 开启多线程来加载并编译.js代码</span><br>          {<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(js|jsx)$/i</span>,<br>            use: [{<br>              <span class="hljs-attr">loader</span>: <span class="hljs-string">'happypack/loader'</span>,<br>              <span class="hljs-attr">options</span>: {<br>                <span class="hljs-attr">threads</span>: <span class="hljs-number">3</span><br>              }<br>            }],<br>            <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>          },<br>        ],<br>      },<br><br>    <span class="hljs-attr">resolve</span>:{<br>        <span class="hljs-attr">extensions</span>: [<span class="hljs-string">'.js'</span>,<span class="hljs-string">'.jsx'</span>,<span class="hljs-string">'.ts'</span>,<span class="hljs-string">'.tsx'</span>],<br>        <span class="hljs-attr">alias</span>:{<br>          <span class="hljs-string">"@"</span>:path.resolve(__dirname,<span class="hljs-string">"../src"</span>),<br>        }<br>      },<br>};<br></code></pre></td></tr></tbody></table></figure><h5 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h5><p>用到的依赖包</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">"devDependencies"</span>: {<br>  <span class="hljs-attr">"@babel/core"</span>: <span class="hljs-string">"^7.15.0"</span>,<br>  <span class="hljs-attr">"@babel/plugin-proposal-decorators"</span>: <span class="hljs-string">"^7.14.5"</span>,<br>  <span class="hljs-attr">"@babel/plugin-syntax-dynamic-import"</span>: <span class="hljs-string">"^7.8.3"</span>,<br>  <span class="hljs-attr">"@babel/preset-env"</span>: <span class="hljs-string">"^7.15.0"</span>,<br>  <span class="hljs-attr">"@babel/preset-react"</span>: <span class="hljs-string">"^7.14.5"</span>,<br>  <span class="hljs-attr">"babel-loader"</span>: <span class="hljs-string">"^8.2.2"</span>,<br>  <span class="hljs-attr">"eslint"</span>: <span class="hljs-string">"^7.32.0"</span>,<br>  <span class="hljs-attr">"eslint-plugin-react"</span>: <span class="hljs-string">"^7.24.0"</span>,<br>  <span class="hljs-attr">"eslint-plugin-react-hooks"</span>: <span class="hljs-string">"^4.2.0"</span>,<br>  <span class="hljs-attr">"eslint-webpack-plugin"</span>: <span class="hljs-string">"^3.0.1"</span>,<br>  <span class="hljs-attr">"happypack"</span>: <span class="hljs-string">"^5.0.1"</span>,<br>  <span class="hljs-attr">"html-webpack-plugin"</span>: <span class="hljs-string">"^5.3.2"</span>,<br>  <span class="hljs-attr">"progress-webpack-plugin"</span>: <span class="hljs-string">"^1.0.12"</span>,<br>  <span class="hljs-attr">"sass"</span>: <span class="hljs-string">"^1.37.5"</span>,<br>  <span class="hljs-attr">"webpack"</span>: <span class="hljs-string">"^5.48.0"</span>,<br>  <span class="hljs-attr">"webpack-cli"</span>: <span class="hljs-string">"^4.7.2"</span>,<br>  <span class="hljs-attr">"webpack-dev-server"</span>: <span class="hljs-string">"^3.11.2"</span><br>},<br><span class="hljs-string">"dependencies"</span>: {<br>  <span class="hljs-attr">"@loadable/component"</span>: <span class="hljs-string">"^5.15.0"</span>,<br>  <span class="hljs-attr">"axios"</span>: <span class="hljs-string">"^0.21.1"</span>,<br>  <span class="hljs-attr">"css-loader"</span>: <span class="hljs-string">"^6.2.0"</span>,<br>  <span class="hljs-attr">"react"</span>: <span class="hljs-string">"^17.0.2"</span>,<br>  <span class="hljs-attr">"react-dom"</span>: <span class="hljs-string">"^17.0.2"</span>,<br>  <span class="hljs-attr">"style-loader"</span>: <span class="hljs-string">"^3.2.1"</span><br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="package-json-添加脚本命令-start-开发环境-build-是构建"><a href="#package-json-添加脚本命令-start-开发环境-build-是构建" class="headerlink" title="package.json 添加脚本命令  start 开发环境  build 是构建"></a>package.json 添加脚本命令  start 开发环境  build 是构建</h5><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">"start"</span>: <span class="hljs-string">"webpack serve --open --config config/webpack.dev.js"</span>,<br><span class="hljs-string">"build"</span>: <span class="hljs-string">"webpack --config config/webpack.prod.js"</span><br></code></pre></td></tr></tbody></table></figure><h5 id="babel配置文件-babel-config-json"><a href="#babel配置文件-babel-config-json" class="headerlink" title="babel配置文件 babel.config.json"></a>babel配置文件 babel.config.json</h5><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">{<br>  <span class="hljs-attr">"presets"</span>: [<br>    [<br>      <span class="hljs-string">"@babel/preset-react"</span>,<br>      {}<br>    ],<br>    [<br>      <span class="hljs-string">"@babel/preset-env"</span>,<br>      {}<br>    ]<br>  ],<br>  <span class="hljs-attr">"plugins"</span>: [<br>    [<br>      <span class="hljs-string">"@babel/plugin-proposal-decorators"</span>,<br>      {<br>        <span class="hljs-attr">"legacy"</span>: <span class="hljs-literal">true</span><br>      }<br>    ],<br>    [<span class="hljs-string">"@babel/plugin-syntax-dynamic-import"</span>]<br>  ]<br>}<br></code></pre></td></tr></tbody></table></figure><h5 id="eslint配置"><a href="#eslint配置" class="headerlink" title="eslint配置"></a>eslint配置</h5><ul><li>.eslintrc.js</li></ul><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 解决ESLint报错常用的五种方案<br><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>、找到eslint的配置文件，修改eslint规则<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>、使用eslint注释的方式，临时关闭对代码的检测<br><span class="hljs-regexp">//</span> <span class="hljs-number">3</span>、在webpack中找到eslint的插件或eslint-loader进行exclude<br><span class="hljs-regexp">//</span> <span class="hljs-number">4</span>、使用.eslintignore临时忽略对代码的检测<br><span class="hljs-regexp">//</span> <span class="hljs-number">5</span>、老老实实地把eslint错误的改好（建议的做法）<br><br>module.exports = {<br>  extends: [<br>    <span class="hljs-string">"eslint:recommended"</span>,<br>    <span class="hljs-string">"plugin:react/recommended"</span><br>  ],<br>  plugins: [ <span class="hljs-string">"react"</span>, <span class="hljs-string">"react-hooks"</span> ],<br>  <span class="hljs-regexp">//</span> 指定检测选项<br>  parserOptions: {<br>      ecmaVersion: <span class="hljs-number">6</span>,<br>      sourceType: <span class="hljs-string">"module"</span>,<br>      ecmaFeatures: {<br>        jsx: true<br>      }<br>  },<br>  env: {<br>    es6: true,<br>    browser: true,<br>    node: true<br>  },<br>  <span class="hljs-regexp">//</span> 用户自定义修改ESLint规则<br>  <span class="hljs-regexp">//</span> ESLint检测代码有三种检测级别：error=<span class="hljs-number">2</span>红色报错，warn=<span class="hljs-number">1</span>黄色警告，off=<span class="hljs-number">0</span>关闭这条规则。<br>  rules: {<br>    <span class="hljs-regexp">//</span> <span class="hljs-string">"semi"</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-regexp">//</span> <span class="hljs-string">"semi"</span>: <span class="hljs-string">"off"</span>,<br>    <span class="hljs-regexp">//</span> <span class="hljs-string">"no-console"</span>: <span class="hljs-string">"error"</span><br>    <span class="hljs-string">"react/prop-types"</span>: <span class="hljs-string">"off"</span>,<br>    <span class="hljs-string">"react-hooks/rules-of-hooks"</span>: <span class="hljs-string">"error"</span>, <span class="hljs-regexp">//</span> 检查 Hook 的规则<br>    <span class="hljs-string">"react-hooks/exhaustive-deps"</span>: <span class="hljs-string">"warn"</span> <span class="hljs-regexp">//</span> 检查 effect 的依赖<br>  }<br>}<br><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Webpack构建Vue开发环境</title>
      <link href="2021/07/30/webpack-gou-jian-vue-kai-fa-huan-jing/"/>
      <url>2021/07/30/webpack-gou-jian-vue-kai-fa-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建webpack环境"><a href="#搭建webpack环境" class="headerlink" title="搭建webpack环境"></a>搭建webpack环境</h3><p><a href="(https://webpack.docschina.org/guides/getting-started/)">webpack官网</a></p><h2 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h2><p>首先我们创建一个目录，初始化 npm，然后 <a href="https://webpack.docschina.org/guides/installation#local-installation">在本地安装 webpack</a>，接着安装 <a href="https://github.com/webpack/webpack-cli">webpack-cli</a>（此工具用于在命令行中运行 webpack）：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">mkdir webpack-demo<br><span class="hljs-built_in">cd</span> webpack-demo<br>npm init -y<br>npm install webpack webpack-cli --save-dev<br></code></pre></td></tr></tbody></table></figure><p>创建以下目录结构、文件和内容：</p><ul><li><strong>project</strong></li></ul><figure class="highlight 1c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  webpack-demo<br>  <span class="hljs-string">|- package.json</span><br>+ <span class="hljs-string">|- index.html</span><br>+ <span class="hljs-string">|- favicon.ico</span><br>+ <span class="hljs-string">|- /src</span><br>+   <span class="hljs-string">|- main.js</span><br></code></pre></td></tr></tbody></table></figure><p>使用到的</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">webpack-merge <br>eslint-webpack-plugin<br>html-webpack-plugin <span class="hljs-regexp">//</span>   npm i --save-dev html-webpack-plugin<br>mini-css-extract-plugin<br>@babel/preset-env<br>@babel/preset-react<br>webpack-dev-server  <span class="hljs-regexp">//</span> 使用devServer  serve命令<br>progress-webpack-plugin  <span class="hljs-regexp">//</span>构建,进度显示百分比%<br>happypack  <span class="hljs-regexp">//</span>加速构建<br>npm install -D babel-loader @babel<span class="hljs-regexp">/core @babel/</span>preset-env webpack  <span class="hljs-regexp">//</span> babel编译器<br><br>eslint-plugin-react<br>=&gt; <br></code></pre></td></tr></tbody></table></figure><h3 id="vue中的loader插件引用"><a href="#vue中的loader插件引用" class="headerlink" title="vue中的loader插件引用"></a>vue中的loader插件引用</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -D vue-loader vue-template-compiler<br></code></pre></td></tr></tbody></table></figure><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> { VueLoaderPlugin } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'vue-loader'</span>)<br><br><span class="hljs-built_in">module</span>.exports = {<br>  <span class="hljs-attr">module</span>: {<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// ... 其它规则</span><br>      {<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.vue$/</span>,<br>        loader: <span class="hljs-string">'vue-loader'</span><br>      }<br>    ]<br>  },<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 请确保引入这个插件！</span><br>    <span class="hljs-keyword">new</span> VueLoaderPlugin()<br>  ]<br>}<br></code></pre></td></tr></tbody></table></figure><h3 id="配置sass"><a href="#配置sass" class="headerlink" title="配置sass"></a>配置sass</h3><p>例如，为了通过 Sass/SCSS 编译我们的 <code>&lt;style&gt;</code> 标签：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -D sass-loader node-sass<br></code></pre></td></tr></tbody></table></figure><p>webpack配置</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports = {<br>  <span class="hljs-attr">module</span>: {<br>    <span class="hljs-attr">rules</span>: [<br>      <span class="hljs-comment">// ... 忽略其它规则</span><br><br>      <span class="hljs-comment">// 普通的 `.scss` 文件和 `*.vue` 文件中的</span><br>      <span class="hljs-comment">// `&lt;style lang="scss"&gt;` 块都应用它</span><br>      {<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.scss$/</span>,<br>        use: [<br>          <span class="hljs-string">'vue-style-loader'</span>,<br>          <span class="hljs-string">'css-loader'</span>,<br>          <span class="hljs-string">'sass-loader'</span><br>        ]<br>      }<br>    ]<br>  },<br>  <span class="hljs-comment">// 插件忽略</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>现在，除了能够 <code>import 'style.scss'</code>，我们还可以在 Vue 组件中使用 SCSS：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-comment">/* 在这里撰写 SCSS */</span></span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p>注意 <code>sass-loader</code> 会默认处理不基于缩进的 <code>scss</code> 语法。为了使用基于缩进的 <code>sass</code> 语法，你需要向这个 loader 传递选项</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js -&gt; module.rules</span><br>{<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.sass$/</span>,<br>  use: [<br>    <span class="hljs-string">'vue-style-loader'</span>,<br>    <span class="hljs-string">'css-loader'</span>,<br>    {<br>      <span class="hljs-attr">loader</span>: <span class="hljs-string">'sass-loader'</span>,<br>      <span class="hljs-attr">options</span>: {<br>        <span class="hljs-attr">indentedSyntax</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">// sass-loader version &gt;= 8</span><br>        <span class="hljs-attr">sassOptions</span>: {<br>          <span class="hljs-attr">indentedSyntax</span>: <span class="hljs-literal">true</span><br>        }<br>      }<br>    }<br>  ]<br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h2><figure class="highlight mipsasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-D <span class="hljs-keyword">babel-core </span><span class="hljs-keyword">babel-loader</span><br></code></pre></td></tr></tbody></table></figure><p>配置webpack</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js -&gt; module.rules</span><br>{<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js?$/</span>,<br>  loader: <span class="hljs-string">'babel-loader'</span><br>}<br></code></pre></td></tr></tbody></table></figure><h2 id="Pub"><a href="#Pub" class="headerlink" title="Pub"></a>Pub</h2><p>模板的处理会稍微有些不同，因为绝大多数 webpack 的模板类 loader，诸如 <code>pug-loader</code>，会返回一个模板函数而不是一个编译好的 HTML 字符串。所以我们需要使用一个返回原始的 HTML 字符串的 loader，例如 <code>pug-plain-loader</code>，而不是使用 <code>pug-loader</code>。</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -D pug pug-plain-loader<br></code></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js -&gt; module.rules</span><br>{<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.pug$/</span>,<br>  loader: <span class="hljs-string">'pug-plain-loader'</span><br>}<br></code></pre></td></tr></tbody></table></figure><p>然后你可以写：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"pug"</span>&gt;</span><br>div<br>  h1 Hello world!<br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><h2 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a>stylelint</h2><p><a href="https://stylelint.io/">stylelint</a> 支持在 Vue 单文件组件的样式部分的代码校验。</p><p>另一个选项是使用 <a href="https://github.com/webpack-contrib/stylelint-webpack-plugin">stylelint-webpack-plugin</a>:</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -D stylelint-webpack-plugin<br></code></pre></td></tr></tbody></table></figure><p>请确保它是作为一个插件运用的:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> StyleLintPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'stylelint-webpack-plugin'</span>);<br><span class="hljs-built_in">module</span>.exports = {<br>  <span class="hljs-comment">// ... 其它选项</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> StyleLintPlugin({<br>      <span class="hljs-attr">files</span>: [<span class="hljs-string">'**/*.{vue,htm,html,css,sss,less,scss,sass}'</span>],<br>    })<br>  ]<br>}<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm切换镜像源</title>
      <link href="2021/07/28/npm-qie-huan-jing-xiang-yuan/"/>
      <url>2021/07/28/npm-qie-huan-jing-xiang-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="npm切换镜像源常用命令"><a href="#npm切换镜像源常用命令" class="headerlink" title="npm切换镜像源常用命令"></a>npm切换镜像源常用命令</h1><p>平时需要使用npm install下载工具时,下载的镜像源在国外,如果想要获得更快的下载速度,不妨可以将npm镜像源切换至国内的淘宝镜像源,这样可以大大提高下载速度,下面列出切换镜像源的命令:</p><p>查看当前镜像源</p><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">$ npm config get registry<br>=&gt; htt<span class="hljs-symbol">ps:</span>//registry.npmjs.org/<br></code></pre></td></tr></tbody></table></figure><p>切换npm镜像源到淘宝</p><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">$ npm config set registry ht<span class="hljs-symbol">tp:</span>//registry.npm.taobao.org/<br>// 使用命令 npm config get registry查看即可确认是否已更换至淘宝镜像源<br>$ npm config get registry<br>=&gt; ht<span class="hljs-symbol">tp:</span>//registry.npm.taobao.org/<br></code></pre></td></tr></tbody></table></figure><p>切换回npm默认镜像源</p><figure class="highlight excel"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">$ npm config set registry htt<span class="hljs-symbol">ps:</span>//registry.npmjs.org/<br>// 使用命令 npm config get registry查看即可确认是否已更换至npm默认镜像源<br>$ npm config get registry<br>=&gt; ht<span class="hljs-symbol">tp:</span>//registry.npm.taobao.org/<br></code></pre></td></tr></tbody></table></figure><p>可以单独设置每次使用npm命令的镜像源,只需要添加如下参数即可:</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ npm --registry https:<span class="hljs-regexp">//</span>registry.npm.taobao.org install<br></code></pre></td></tr></tbody></table></figure><p>使用npx工具切换淘宝镜像源:</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>npx nrm <span class="hljs-keyword">use</span> taobao<br></code></pre></td></tr></tbody></table></figure><p>切换回默认镜像源:</p><figure class="highlight elixir"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>npx nrm <span class="hljs-keyword">use</span> npm<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的Vue-Router集成与使用</title>
      <link href="2021/07/13/vue-zhong-vue-router-ji-cheng-yu-shi-yong/"/>
      <url>2021/07/13/vue-zhong-vue-router-ji-cheng-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Router集成与使用"><a href="#Vue-Router集成与使用" class="headerlink" title="Vue-Router集成与使用"></a>Vue-Router集成与使用</h1><h3 id="安装Vue-Router"><a href="#安装Vue-Router" class="headerlink" title="安装Vue-Router"></a>安装Vue-Router</h3><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install router -S<br></code></pre></td></tr></tbody></table></figure><h3 id="在Vue中导入Vue-Router"><a href="#在Vue中导入Vue-Router" class="headerlink" title="在Vue中导入Vue-Router"></a>在Vue中导入Vue-Router</h3><p>在脚手架环境中与main.js同级目录下新建router.js ,添加以下代码</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">import Vue from <span class="hljs-string">'vue'</span><br>import VueRouter from <span class="hljs-string">'vue-router'</span><br><span class="hljs-regexp">//</span> 注册并使用第三方插件  这样一位,在当前Vue环境中多了以下的API<br><span class="hljs-regexp">//</span> <span class="hljs-number">1</span>. 多了两个内置组件: &lt;router-link&gt; , &lt;router-view&gt;<br><span class="hljs-regexp">//</span> <span class="hljs-number">2</span>. 在组件实例对象上多了两个内置API: <span class="hljs-variable">$route</span>  <span class="hljs-variable">$router</span><br>Vue.use(VueRouter)<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue-Router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中脚手架环境搭建</title>
      <link href="2021/07/13/vue-jiao-shou-jia-huan-jing-da-jian/"/>
      <url>2021/07/13/vue-jiao-shou-jia-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="脚手架环境搭建"><a href="#脚手架环境搭建" class="headerlink" title="脚手架环境搭建"></a>脚手架环境搭建</h1><h3 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装@vue/cli"></a>安装@vue/cli</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 全局安装脚手架工具<br>npm install @vue/cli -g<br></code></pre></td></tr></tbody></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 命令行创建项目 <br>vue create 项目名 <br>vue create vue-project<br></code></pre></td></tr></tbody></table></figure><p>可以选择Vue2.0和3.0版本,这里我们选择 Vue 2.0 版本,按回车即可</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210713081249368.png" alt="image-20210713081249368"></p><p>创建过程中会下载相关依赖插件,等待下载完成即可</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210713081604161.png" alt="image-20210713081604161"></p><p>下载创建完成会有如下提示</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210713081632693.png" alt="image-20210713081632693"></p><p>下载完成创建的目录结构:</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210713081811328.png" alt="image-20210713081811328"></p><h2 id="在Vue中集成axios请求工具"><a href="#在Vue中集成axios请求工具" class="headerlink" title="在Vue中集成axios请求工具"></a>在Vue中集成axios请求工具</h2><p>安装 axios</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install axios -S<br></code></pre></td></tr></tbody></table></figure><p>在main.js中引入axios</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">'axios'</span><br><span class="hljs-comment">// 引入之后可以在组件中 使用this.$http  请求数据</span><br>Vue.prototype.$http = axios<br></code></pre></td></tr></tbody></table></figure><p>之后可以在组件中使用axios进行请求,具体的使用方式可参考  <a href="https://github.com/axios/axios">axios使用文档</a></p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210713082423650.png" alt="image-20210713082423650"></p><p><img src="/img/image-20210713082423650.png" alt="image-20210713082423650"></p><p><img src="/Users/xiekecheng/Documents/HexoBlog/HexoBlog/public/img/image-20210713082423650.png" alt="image-20210713082423650"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数组方法总结</title>
      <link href="2021/06/16/shu-zu-fang-fa/"/>
      <url>2021/06/16/shu-zu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h1><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>对数组进行增、删、改。通常用于删除数组中的元素，返回所有被删除元素组成的数组</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.splice(开始下标,删除的个数[,在删除位置上要添加的元素们])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>];<br><span class="hljs-comment">// 增</span><br><span class="hljs-comment">// arr.splice(1,0,'d','e')</span><br><br><span class="hljs-comment">// 改</span><br><span class="hljs-comment">// arr.splice(1,1,'d')</span><br><br><span class="hljs-comment">// 删</span><br>arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></tbody></table></figure><h2 id="push-pop-shift-unshift"><a href="#push-pop-shift-unshift" class="headerlink" title="push/pop/shift/unshift"></a>push/pop/shift/unshift</h2><p>push：给数组的末尾添加一个或多个元素，返回新数组长度</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.push(元素<span class="hljs-number">1</span>[,元素<span class="hljs-number">2</span>,....])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ele = arr.push(<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>)<br><span class="hljs-built_in">console</span>.log(ele);<br></code></pre></td></tr></tbody></table></figure><p>pop：将数组的最后一个元素删除，返回被删除的元素</p><p>语法：</p><figure class="highlight gcode"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">数组.pop<span class="hljs-comment">()</span><br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ele = arr.pop()<br><span class="hljs-built_in">console</span>.log(ele,arr); <span class="hljs-comment">// c ["a", "b"]</span><br></code></pre></td></tr></tbody></table></figure><p>shift：删除数组第一个元素，返回被删除的元素</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.shift()<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ele = arr.shift()<br><span class="hljs-built_in">console</span>.log(arr,ele); <span class="hljs-comment">// ["b", "c"] "a"</span><br></code></pre></td></tr></tbody></table></figure><p>unshift：给数组的开头添加一个或多个元素，返回数组长度</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.unshift(元素<span class="hljs-number">1</span>[,元素<span class="hljs-number">2</span>,....])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ele = arr.unshift(<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>)<br><span class="hljs-built_in">console</span>.log(ele,arr); <span class="hljs-comment">// 5 ["d", "e", "a", "b", "c"]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>对数组做排序</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.sort([<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>{<span class="hljs-keyword">return</span> a-b/b-a}])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>];<br><span class="hljs-comment">// var ele = arr.sort()</span><br><span class="hljs-comment">// console.log(arr,ele); // [1, 2, 3, 4, 5, 6, 7, 8, 9]  &nbsp;[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>{<br>    <span class="hljs-comment">// return a-b // 升序</span><br>    <span class="hljs-keyword">return</span> b-a <span class="hljs-comment">// 降序</span><br>})<br><span class="hljs-built_in">console</span>.log(arr);<br><br><span class="hljs-keyword">var</span> arr = [<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"张三"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"男"</span><br>    },<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"李四"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"女"</span><br>    },<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"王五"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">15</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"男"</span><br>    }<br>];<br><br>arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>{<br>    <span class="hljs-keyword">return</span> b.age - a.age<br>})<br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></tbody></table></figure><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>翻转数组，头尾倒置</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.reverse()<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"张三"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"男"</span><br>    },<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"李四"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"女"</span><br>    },<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"王五"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">15</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"男"</span><br>    }<br>];<br><br>arr.reverse()<br><span class="hljs-built_in">console</span>.log(arr);<br></code></pre></td></tr></tbody></table></figure><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>合并数组，将1个或多个数组或1个或多个元素跟当前数组合并成一个更大的数组并返回</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = 数组.concat(数组[，数组,...])<br><span class="hljs-keyword">var</span> arr = 数组.concat(元素[元素,...])<br><span class="hljs-keyword">var</span> arr = 数组.concat(元素[数组,...])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>];<br><span class="hljs-keyword">var</span> brr = [<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>,<span class="hljs-string">'f'</span>];<br><span class="hljs-keyword">var</span> crr = [<span class="hljs-string">'h'</span>,<span class="hljs-string">'i'</span>,<span class="hljs-string">'j'</span>];<br><br><span class="hljs-comment">// var drr = arr.concat(brr,crr)</span><br><span class="hljs-keyword">var</span> drr = arr.concat(brr,<span class="hljs-string">'1'</span>,<span class="hljs-string">'2'</span>,<span class="hljs-string">'3'</span>)<br><span class="hljs-built_in">console</span>.log(drr);<br></code></pre></td></tr></tbody></table></figure><p><font color="red"><strong>注意：返回值一定是一个一维数组</strong></font></p><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>截取数组，从一个数组中截取一段</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.slice(开始下标[,结束下标])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'d'</span>,<span class="hljs-string">'e'</span>,<span class="hljs-string">'f'</span>];<br><span class="hljs-keyword">var</span> brr = arr.slice(<span class="hljs-number">2</span>) <br><span class="hljs-built_in">console</span>.log(brr); <span class="hljs-comment">// ["c", "d", "e", "f"]</span><br><br><span class="hljs-keyword">var</span> crr = arr.slice(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.log(crr); <span class="hljs-comment">// ["c", "d"]</span><br></code></pre></td></tr></tbody></table></figure><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>将数组所有元素通过指定的连接符，连成一个字符串</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.join([连接符])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// var str = arr.join() // a,b,c,d,e,f</span><br><span class="hljs-keyword">var</span> str = arr.join(<span class="hljs-string">'--'</span>) <span class="hljs-comment">// a--b--c--d--e--f</span><br><span class="hljs-built_in">console</span>.log(str);<br></code></pre></td></tr></tbody></table></figure><h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2><p>找一个元素在数组中第一次出现的下标</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.indexOf(元素[开始查找的下标])<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">'a'</span>,<span class="hljs-string">'b'</span>,<span class="hljs-string">'c'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-string">'d'</span>];<br><span class="hljs-keyword">var</span> index1 = arr.indexOf(<span class="hljs-string">'a'</span>)<br><span class="hljs-built_in">console</span>.log(index1); <span class="hljs-comment">// 0</span><br><br><span class="hljs-keyword">var</span> index2 = arr.indexOf(<span class="hljs-string">'a'</span>,<span class="hljs-number">1</span>)<br><span class="hljs-built_in">console</span>.log(index2); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></tbody></table></figure><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>遍历数组 - 没有返回值，类似于for循环遍历</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">数组.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v[,i,a]</span>)</span>{<br>    <span class="hljs-comment">// v是遍历出的每个元素</span><br>    <span class="hljs-comment">// i是每个v对应的下标</span><br>    <span class="hljs-comment">// a当前正在遍历的数组</span><br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><br></code></pre></td></tr></tbody></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>数组每个元素都被回调函数处理，返回每一个处理过的新元素，所有新元素组成一个新数组返回</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = 数组.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v[,i,a]</span>)</span>{<br>    <span class="hljs-comment">// v是遍历出的每个元素</span><br>    <span class="hljs-comment">// i是每个v对应的下标</span><br>    <span class="hljs-comment">// a当前正在遍历的数组</span><br>    <span class="hljs-keyword">return</span> 新元素<br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"张三"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">12</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"男"</span><br>    },<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"李四"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">10</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"女"</span><br>    },<br>    {<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">"王五"</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">15</span>,<br>        <span class="hljs-attr">sex</span>:<span class="hljs-string">"男"</span><br>    }<br>];<br><br><span class="hljs-keyword">var</span> brr = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)</span>{<br>    <span class="hljs-keyword">return</span> v.name <span class="hljs-comment">// ["张三", "李四", "王五"]</span><br>    <span class="hljs-comment">// return v.age + 20 // &nbsp;[32, 30, 35]</span><br>})<br><span class="hljs-built_in">console</span>.log(brr);<br></code></pre></td></tr></tbody></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>将数组中满足指定条件的所有元素组成一个新数组返回</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = 数组.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v[,i,a]</span>)</span>{<br>    <span class="hljs-comment">// v是遍历出的每个元素</span><br>    <span class="hljs-comment">// i是每个v对应的下标</span><br>    <span class="hljs-comment">// a当前正在遍历的数组</span><br>    <span class="hljs-keyword">return</span> 条件<br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">20</span>,<span class="hljs-number">50</span>,<span class="hljs-number">90</span>,<span class="hljs-number">60</span>,<span class="hljs-number">30</span>,<span class="hljs-number">70</span>,<span class="hljs-number">15</span>];<br><span class="hljs-keyword">var</span> brr = arr.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)</span>{<br>    <span class="hljs-keyword">return</span> v&lt;<span class="hljs-number">60</span> <span class="hljs-comment">// [20, 50, 30, 15]</span><br>})<br><span class="hljs-built_in">console</span>.log(brr);<br></code></pre></td></tr></tbody></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>归并 - 通常利用这个方法求数组元素的和</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> res = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">prev,next</span>)</span>{<br>    <span class="hljs-comment">// prev第一次代表第一个元素，next第一次代表第二个元素</span><br>    <span class="hljs-comment">// prev第二次开始，代表上一次返回的值，next第二个代表第三个元素，第三次代表第四个元素 ...</span><br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sum = arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">prev,next</span>)</span>{<br>    <span class="hljs-keyword">return</span> prev + next;<br>})<br><span class="hljs-built_in">console</span>.log(sum);<br></code></pre></td></tr></tbody></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>判断数组中是否至少有一个元素是满足条件的 - 返回布尔值</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bool = 数组.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v[,i,a]</span>)</span>{<br>    <span class="hljs-comment">// v是遍历出的每个元素</span><br>    <span class="hljs-comment">// i是每个v对应的下标</span><br>    <span class="hljs-comment">// a当前正在遍历的数组</span><br>    <span class="hljs-keyword">return</span> 条件<br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bool = arr.some(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)</span>{<br>    <span class="hljs-keyword">return</span> v&lt;<span class="hljs-number">60</span><br>})<br><span class="hljs-built_in">console</span>.log(bool);<br></code></pre></td></tr></tbody></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>判断数组中是否所有元素都满足条件</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bool = 数组.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v[,i,a]</span>)</span>{<br>    <span class="hljs-comment">// v是遍历出的每个元素</span><br>    <span class="hljs-comment">// i是每个v对应的下标</span><br>    <span class="hljs-comment">// a当前正在遍历的数组</span><br>    <span class="hljs-keyword">return</span> 条件<br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> bool = arr.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)</span>{<br>    <span class="hljs-keyword">return</span> v&gt;=<span class="hljs-number">60</span><br>})<br><span class="hljs-built_in">console</span>.log(bool);<br></code></pre></td></tr></tbody></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>找数组中第一个满足条件的元素 - 返回这个元素</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ele = 数组.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v[,i,a]</span>)</span>{<br>    <span class="hljs-comment">// v是遍历出的每个元素</span><br>    <span class="hljs-comment">// i是每个v对应的下标</span><br>    <span class="hljs-comment">// a当前正在遍历的数组</span><br>    <span class="hljs-keyword">return</span> 条件<br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">120</span>,<span class="hljs-number">50</span>,<span class="hljs-number">90</span>,<span class="hljs-number">60</span>,<span class="hljs-number">30</span>,<span class="hljs-number">70</span>,<span class="hljs-number">15</span>];<br><span class="hljs-keyword">var</span> ele = arr.find(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)</span>{<br>    <span class="hljs-keyword">return</span> v&lt;<span class="hljs-number">60</span><br>})<br><span class="hljs-built_in">console</span>.log(ele); <span class="hljs-comment">// 50</span><br></code></pre></td></tr></tbody></table></figure><h2 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h2><p>找数组中第一个满足条件的元素的下标 - 返回这个元素对应的下标</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> index = 数组.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v[,i,a]</span>)</span>{<br>    <span class="hljs-comment">// v是遍历出的每个元素</span><br>    <span class="hljs-comment">// i是每个v对应的下标</span><br>    <span class="hljs-comment">// a当前正在遍历的数组</span><br>    <span class="hljs-keyword">return</span> 条件<br>})<br></code></pre></td></tr></tbody></table></figure><p>例：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">120</span>,<span class="hljs-number">50</span>,<span class="hljs-number">90</span>,<span class="hljs-number">60</span>,<span class="hljs-number">30</span>,<span class="hljs-number">70</span>,<span class="hljs-number">15</span>];<br><span class="hljs-keyword">var</span> index = arr.findIndex(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)</span>{<br>    <span class="hljs-keyword">return</span> v&lt;<span class="hljs-number">60</span><br>})<br><span class="hljs-built_in">console</span>.log(index);<br></code></pre></td></tr></tbody></table></figure><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray"></a>Array.isArray</h2><p>检测一个变量是否是数组 - 返回布尔值</p><p>语法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Array</span>.isArray(被检测的变量)<br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript使用说明</title>
      <link href="2021/06/10/typescript-shi-yong-shuo-ming/"/>
      <url>2021/06/10/typescript-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h2 id="typescript安装"><a href="#typescript安装" class="headerlink" title="typescript安装"></a>typescript安装</h2><p>全局安装typescript</p><figure class="highlight coffeescript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i typescript -g<br></code></pre></td></tr></tbody></table></figure><p>查看typescript是否安装成功</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">tsc <span class="hljs-comment">--version</span><br></code></pre></td></tr></tbody></table></figure><p>初始化typescript,生成配置文件</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">tsc <span class="hljs-comment">--init</span><br></code></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas</title>
      <link href="2021/06/07/day37-canvas/"/>
      <url>2021/06/07/day37-canvas/</url>
      
        <content type="html"><![CDATA[<h1 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>canvas是html5的一个标签，代表一个画布，可以在上面进行绘画、动画等操作。画布默认大小是300*150。</p><p>canvas标签本省只是画布，要实现上面有文字、线条等呈现，需要使用js实现。总之，画布上一切的呈现，都需要使用js来实现。canvas标签本质上就是一张图片，只是一张空白图片。</p><p>画布大小不能使用样式控制，用样式调整的是一个可视区域，其实真实的大小，还是一样的，只是在画布上画内容的话，会等比例放大。调整画布大小，需要在标签上直接添加width和height属性。</p><p>canvas标签也是可以放文字的，只是当canvas标签不被浏览器支持的时候，会显示，例如ie8。</p><h1 id="canvas简单使用"><a href="#canvas简单使用" class="headerlink" title="canvas简单使用"></a>canvas简单使用</h1><ol><li><p>获取canvas元素</p> <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'canvas'</span>);<br></code></pre></td></tr></tbody></table></figure></li><li><p>获取canvas元素工具箱 - 上下文</p> <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">'2d'</span>);<br></code></pre></td></tr></tbody></table></figure></li><li><p>画图形</p><p> 先确定起始点</p> <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx.moveTo(x轴坐标,y轴坐标)<br></code></pre></td></tr></tbody></table></figure><p> 从起始点开始画直线</p> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.lineTo(<span class="hljs-number">200</span>,<span class="hljs-number">20</span>)<br></code></pre></td></tr></tbody></table></figure><p> 描边</p> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.stroke()<br></code></pre></td></tr></tbody></table></figure><p> 填充颜色</p> <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx.fill()<br></code></pre></td></tr></tbody></table></figure><p> 想告诉canvas绘制的下条凸显和之前没关系,则使用</p> <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx.beginPath()<br>结尾使用<br>ctx.closePath()<br></code></pre></td></tr></tbody></table></figure></li></ol><h4 id="画虚线"><a href="#画虚线" class="headerlink" title="画虚线"></a>画虚线</h4><figure class="highlight less"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">ctx</span><span class="hljs-selector-class">.setLineDash</span>(参数);<br><span class="hljs-comment">// 参数：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">数组 - 虚线方案，在数组中描述线条和空白的长度，然后不停的重复</span><br><span class="hljs-comment">两个值，第一个值是线条长度，第二个值是空白长度 - 重复</span><br><span class="hljs-comment">三个值，第一个值是线条长度，第二个值空白长度，第三个值是线条的长度；接下来是第二个值的空白长度，第二个值是线条的长度，第三个值是空白的长度 - 重复</span><br><span class="hljs-comment">四个值，第一个值是线条长度，第二个值是空白长度，第三个值是线条的长度，第四个值是空白长度 - 重复</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">总结：</span><br><span class="hljs-comment">数组中有奇数个元素，那重复的个数就是 2*奇数个</span><br><span class="hljs-comment">数组中有偶数个元素，那重复的个数就是偶数个</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></tbody></table></figure><h4 id="获取虚线的方法"><a href="#获取虚线的方法" class="headerlink" title="获取虚线的方法"></a>获取虚线的方法</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx.getLineDash()<br><span class="hljs-comment">// 获取到的是一个数组，数组中记录了一段不重复的虚线方案</span><br></code></pre></td></tr></tbody></table></figure><h4 id="实现纯色的颜色渐变"><a href="#实现纯色的颜色渐变" class="headerlink" title="实现纯色的颜色渐变"></a>实现纯色的颜色渐变</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'canvas'</span>);<br><span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">'2d'</span>);<br>ctx.lineWidth = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i =<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">256</span>;i++){<br>    ctx.beginPath()<br>    ctx.moveTo(<span class="hljs-number">100</span>+i,<span class="hljs-number">100</span>)<br>    ctx.lineTo(<span class="hljs-number">100</span>+i+<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br>    <span class="hljs-comment">// ctx.lineTo(150,120)</span><br>    ctx.strokeStyle  = <span class="hljs-string">`rgb(255,<span class="hljs-subst">${<span class="hljs-number">255</span>-i}</span>,<span class="hljs-subst">${<span class="hljs-number">255</span>-i}</span>)`</span>;<br>    ctx.closePath()<br>    ctx.stroke()<br>}<br></code></pre></td></tr></tbody></table></figure><h4 id="画弧线"><a href="#画弧线" class="headerlink" title="画弧线"></a>画弧线</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br>&lt;html lang="en"&gt;<br>&lt;head&gt;<br>    &lt;meta charset="UTF-8"&gt;<br>    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;<br>    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        canvas {<br>            border: 1px solid black;<br>        }<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;canvas width ="600" height ="300"&gt; &lt;/canvas&gt;<br>    &lt;script&gt;<br>       <br>        var canvas = document.querySelector('canvas');<br>        var ctx = canvas.getContext('2d');<br>        ctx.lineWidth = 2;<br>        ctx.moveTo(100,100);<br>        ctx.arc(100, 100, 100, 0, 60 * Math.PI / 180);<br>        ctx.stroke()<br>        ctx.fill()<br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></tbody></table></figure><h4 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h4><p>画矩形需要设置起点和矩形的宽高</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx.rect(起点x,起点y,宽,高)<br>ctx.stroke()<br><br>&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span></span><br><span class="css"><span class="xml">        <span class="hljs-selector-tag">canvas</span> {</span></span><br><span class="css"><span class="xml">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span></span><br><span class="css"><span class="xml">        }</span></span><br><span class="css"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span> =<span class="hljs-string">"600"</span> <span class="hljs-attr">height</span> =<span class="hljs-string">"300"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'canvas'</span>);</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">'2d'</span>);</span></span><br><span class="javascript"><span class="xml">        ctx.lineWidth = <span class="hljs-number">2</span>;</span></span><br><span class="javascript"><span class="xml">        ctx.fillRect(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>直接绘制矩形并描边</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx.strockRect(起点x,起点y,宽,高)<br>ctx.strokeRect(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);<br></code></pre></td></tr></tbody></table></figure><p>直接绘制矩形并填充</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">ctx.strockRect(起点x,起点y,宽,高)<br>ctx.fillRect(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>)<br></code></pre></td></tr></tbody></table></figure><h4 id="绘制等分圆形"><a href="#绘制等分圆形" class="headerlink" title="绘制等分圆形"></a>绘制等分圆形</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">canvas</span> {</span><br><span class="css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">        }</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"600"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"300"</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'canvas'</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">'2d'</span>);</span><br><span class="javascript">        <span class="hljs-comment">// 设置线段宽度</span></span><br><span class="javascript">        ctx.lineWidth = <span class="hljs-number">2</span>;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 半径</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> r = <span class="hljs-number">100</span></span><br><span class="javascript">        <span class="hljs-comment">// 分成4等分</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> num = <span class="hljs-number">4</span>;</span><br><span class="javascript">        <span class="hljs-keyword">var</span> startArc = <span class="hljs-number">0</span>;</span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) {</span><br><span class="javascript">            ctx.beginPath();</span><br><span class="javascript">            <span class="hljs-comment">// 设置画笔放在圆心</span></span><br><span class="javascript">            ctx.moveTo(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);</span><br><span class="javascript">            <span class="hljs-comment">// 设置填空的颜色</span></span><br><span class="javascript">            ctx.fillStyle = getColor();</span><br><span class="javascript">            <span class="hljs-comment">// 画弧线</span></span><br><span class="javascript">            ctx.arc(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, r, startArc, (i * <span class="hljs-number">360</span> / num) * <span class="hljs-built_in">Math</span>.PI / <span class="hljs-number">180</span>);</span><br><span class="javascript">            ctx.closePath();</span><br><span class="javascript">            <span class="hljs-comment">// 描边</span></span><br><span class="javascript">            ctx.stroke();</span><br><span class="javascript">            <span class="hljs-comment">// 填充</span></span><br><span class="javascript">            ctx.fill();</span><br><span class="javascript">            <span class="hljs-comment">// 将末尾的角度设置为开始的角度,方便下次循环取值</span></span><br><span class="javascript">            startArc =  (i * <span class="hljs-number">360</span> / num) * <span class="hljs-built_in">Math</span>.PI / <span class="hljs-number">180</span>;</span><br><span class="javascript">        }</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 获取随机颜色</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span>(<span class="hljs-params"></span>) </span>{</span><br><span class="javascript">            <span class="hljs-keyword">var</span> c = <span class="hljs-string">'#'</span>;</span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) {</span><br><span class="javascript">                c += <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">16</span>).toString(<span class="hljs-number">16</span>);</span><br><span class="javascript">            }</span><br><span class="javascript">            <span class="hljs-keyword">return</span> c;</span><br><span class="javascript">        }</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/20210608185638.png"></p><h4 id="画饼图"><a href="#画饼图" class="headerlink" title="画饼图"></a>画饼图</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'canvas'</span>);<br>    <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">'2d'</span>);<br>    <span class="hljs-comment">// 设置线段宽度</span><br>    ctx.lineWidth = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">var</span> width = ctx.canvas.width;<br>    <span class="hljs-keyword">var</span> height = ctx.canvas.height;<br><br>    <span class="hljs-comment">//设置圆心</span><br>    <span class="hljs-keyword">var</span> x = width/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">var</span> y = height/<span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">// 半径</span><br>    <span class="hljs-keyword">var</span> r = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">22</span>,<span class="hljs-number">18</span>,<span class="hljs-number">31</span>,<span class="hljs-number">17</span>,<span class="hljs-number">123</span>];<br>    <span class="hljs-comment">// 获取数组里的数的总和</span><br>    <span class="hljs-keyword">var</span> total = arr.reduce(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>a+b);<br>    <span class="hljs-keyword">var</span> startArc = <span class="hljs-number">0</span>;<br>    arr.forEach(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>{<br>        ctx.beginPath();<br>        ctx.moveTo(x,y);<br>        ctx.fillStyle = getColor()<br>        <span class="hljs-keyword">var</span> endArc = startArc+v/total*<span class="hljs-number">360</span>*<span class="hljs-built_in">Math</span>.PI/<span class="hljs-number">180</span>;<br>        ctx.arc(x,y,r,startArc,endArc);<br>        ctx.closePath()<br>        ctx.stroke()<br>        ctx.fill()<br>        startArc=endArc;<br>    })<br><br>    <span class="hljs-comment">// 获取随机颜色</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getColor</span>(<span class="hljs-params"></span>) </span>{<br>        <span class="hljs-keyword">var</span> c = <span class="hljs-string">'#'</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) {<br>            c += <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">16</span>).toString(<span class="hljs-number">16</span>);<br>        }<br>        <span class="hljs-keyword">return</span> c;<br>    }<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>效果如下图</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210608195527042.png" alt="image-20210608195527042"></p><h4 id="画文字"><a href="#画文字" class="headerlink" title="画文字"></a>画文字</h4><p>画文字用到的方法和属性</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//文字大小</span><br>ctx.font = <span class="hljs-string">'字号大小 字体'</span><br><br><span class="hljs-comment">//例</span><br>ctx.font = <span class="hljs-string">'bold 48px serif'</span>;<br>ctx.strokeText(<span class="hljs-string">'Hello world'</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>);<br><br><span class="hljs-comment">//画文字</span><br>ctx.strokeText(文本,文字开始x,文字开始y) <span class="hljs-comment">// 描边</span><br>ctx.fillText(文本,文字开始x,文字开始y) <span class="hljs-comment">// 填充文字</span><br><br><span class="hljs-comment">//上下对齐方式</span><br>ctx.textBaseLine = 值;<br><span class="hljs-comment">// 取值：</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">默认是baseline</span><br><span class="hljs-comment">bottom：底线对齐</span><br><span class="hljs-comment">top：顶线对齐</span><br><span class="hljs-comment">middle：中线对齐</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//左右对齐方式</span><br>ctx.textAlign = 值;<br><span class="hljs-comment">// 取值：基于我们设置的文字坐标来对齐的</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">left - 默认值，左对齐</span><br><span class="hljs-comment">right - 右对齐</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//获取文本内容总宽度</span><br>ctx.measureText(文本内容)<br><span class="hljs-comment">// 获取到一个对象，其中包含width属性就是文字的宽度</span><br>ctx.measureText(文本内容).width   <br><span class="hljs-comment">//计算方式是字的个数乘fontsize</span><br></code></pre></td></tr></tbody></table></figure><p>画文字代码</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'canvas'</span>);<br>    <span class="hljs-keyword">var</span> ctx = canvas.getContext(<span class="hljs-string">'2d'</span>);<br>    <span class="hljs-comment">// 设置线段宽度</span><br>    ctx.lineWidth = <span class="hljs-number">2</span>;<br>    <span class="hljs-comment">// 获取canvas宽高</span><br>    <span class="hljs-keyword">var</span> width = ctx.canvas.width;<br>    <span class="hljs-keyword">var</span> height = ctx.canvas.height;<br><br>    ctx.font = <span class="hljs-string">'48px serif'</span><br>    ctx.strokeText(<span class="hljs-string">'我是天下第一帅'</span>,<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></tbody></table></figure><p>效果如下:</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210608201325182.png" alt="image-20210608201325182"></p><h4 id="使用Echarts绘制饼图"><a href="#使用Echarts绘制饼图" class="headerlink" title="使用Echarts绘制饼图"></a>使用Echarts绘制饼图</h4><p><a href="https://echarts.apache.org/zh/index.html">Echarts官网</a></p><p>利用Echarts,代入数据即可生成美观好看的折线图..柱状图,饼图之类的图形</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!DOCTYPE html&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ECharts<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 引入 echarts.js --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- &lt;script src="./js/echarts.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 可通过cdn引入echarts.js文件 --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.jsdelivr.net/npm/echarts@5.1.1/dist/echarts.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml">    <span class="hljs-comment">&lt;!-- 为ECharts准备一个具备大小（宽高）的Dom --&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"main"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 900px;height:600px;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// import * as echarts from 'echarts';</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-comment">// var echarts = require('echarts');</span></span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> chartDom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'main'</span>);</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> myChart = echarts.init(chartDom);</span></span><br><span class="javascript"><span class="xml">        <span class="hljs-keyword">var</span> option;</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        option = {</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">legend</span>: {</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">top</span>: <span class="hljs-string">'bottom'</span></span></span><br><span class="javascript"><span class="xml">            },</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">toolbox</span>: {</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">feature</span>: {</span></span><br><span class="javascript"><span class="xml">                    <span class="hljs-attr">mark</span>: {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    <span class="hljs-attr">dataView</span>: {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">readOnly</span>: <span class="hljs-literal">false</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    <span class="hljs-attr">restore</span>: {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    <span class="hljs-attr">saveAsImage</span>: {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span></span><br><span class="javascript"><span class="xml">                    }</span></span><br><span class="javascript"><span class="xml">                }</span></span><br><span class="javascript"><span class="xml">            },</span></span><br><span class="javascript"><span class="xml">            <span class="hljs-attr">series</span>: [{</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">name</span>: <span class="hljs-string">'年龄分布'</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">type</span>: <span class="hljs-string">'pie'</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">radius</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">250</span>],</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">center</span>: [<span class="hljs-string">'50%'</span>, <span class="hljs-string">'50%'</span>],</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">roseType</span>: <span class="hljs-string">'area'</span>,</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">itemStyle</span>: {</span></span><br><span class="javascript"><span class="xml">                    <span class="hljs-attr">borderRadius</span>: <span class="hljs-number">8</span></span></span><br><span class="javascript"><span class="xml">                },</span></span><br><span class="javascript"><span class="xml">                <span class="hljs-comment">// var arr = [22,18,31,17,42,32,15,22,30];</span></span></span><br><span class="javascript"><span class="xml">                <span class="hljs-attr">data</span>: [{</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">22</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'15-20岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">18</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'20-25岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">31</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'25-30岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">17</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'30-35岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">42</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'35-40岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">32</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'40-45岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">15</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'45-50岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">22</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'50-55岁'</span></span></span><br><span class="javascript"><span class="xml">                    },</span></span><br><span class="javascript"><span class="xml">                    {</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">value</span>: <span class="hljs-number">30</span>,</span></span><br><span class="javascript"><span class="xml">                        <span class="hljs-attr">name</span>: <span class="hljs-string">'55-60岁'</span></span></span><br><span class="javascript"><span class="xml">                    }</span></span><br><span class="javascript"><span class="xml">                ]</span></span><br><span class="javascript"><span class="xml">            }]</span></span><br><span class="javascript"><span class="xml">        };</span></span><br><span class="javascript"><span class="xml"></span></span><br><span class="javascript"><span class="xml">        option &amp;&amp; myChart.setOption(option);</span></span><br><span class="javascript"><span class="xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></tbody></table></figure><p>效果图:</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210608205136100.png" alt="image-20210608205136100"></p><p>正文</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>参考资料1<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:1" class="footnote-text"><span>参考资料:<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>参考资料2<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>build-hexo</title>
      <link href="2021/05/15/build-hexo/"/>
      <url>2021/05/15/build-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac环境下基于hexo-github搭建个人博客"><a href="#Mac环境下基于hexo-github搭建个人博客" class="headerlink" title="Mac环境下基于hexo+github搭建个人博客"></a>Mac环境下基于hexo+github搭建个人博客</h1><h2 id="1安装HomeBrew"><a href="#1安装HomeBrew" class="headerlink" title="1安装HomeBrew"></a><code>1安装HomeBrew</code></h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"<br></code></pre></td></tr></tbody></table></figure><p>查看是否安装成功: brew –version</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>用brew安装Git,如果已安装,则忽略该步骤</p><figure class="highlight awk"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git --version <span class="hljs-regexp">//</span>查看是否安装成功<br></code></pre></td></tr></tbody></table></figure><h3 id="使用brew-安装nvm"><a href="#使用brew-安装nvm" class="headerlink" title="使用brew 安装nvm"></a>使用brew 安装nvm</h3><p><code>brew install nvm</code></p><h3 id="创建-nvm文件"><a href="#创建-nvm文件" class="headerlink" title="创建.nvm文件"></a>创建.nvm文件</h3><p><code>mkdir ~/.nvm</code></p><p>在 ~/.bash_profile 或者 ~/.zshrc 中添加下面命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">"<span class="hljs-variable">$HOME</span>/.nvm"</span><br>[ -s <span class="hljs-string">"/usr/local/opt/nvm/nvm.sh"</span> ] &amp;&amp; . <span class="hljs-string">"/usr/local/opt/nvm/nvm.sh"</span>  <span class="hljs-comment"># This loads nvm</span><br>[ -s <span class="hljs-string">"/usr/local/opt/nvm/etc/bash_completion"</span> ] &amp;&amp; . <span class="hljs-string">"/usr/local/opt/nvm/etc/bash_completion"</span>  <span class="hljs-comment"># This loads nvm bash_completion</span><br></code></pre></td></tr></tbody></table></figure><p>source一下</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Source</span> ~/.zshrc<br></code></pre></td></tr></tbody></table></figure><h3 id="4-安装node"><a href="#4-安装node" class="headerlink" title="4.安装node"></a>4.安装node</h3><p>通过nvm安装node</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">nvm ls-remote                   #查看node所有版本<br>nvm install v12.12.0            #安装你要的版本<br>nvm use v12.12.0                #使用指定的版本<br>nvm alias default v12.12.0      #默认版本，每次打开终端，都自动使用该版本<br></code></pre></td></tr></tbody></table></figure><p>安装是否成功：node -v 、npm -v</p><p>查看nvm使用帮助:</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nvm</span><br></code></pre></td></tr></tbody></table></figure><h3 id="5-安装配置Hexo"><a href="#5-安装配置Hexo" class="headerlink" title="5.安装配置Hexo"></a>5.安装配置Hexo</h3><h6 id="利用npm命令安装"><a href="#利用npm命令安装" class="headerlink" title="利用npm命令安装"></a>利用npm命令安装</h6><figure class="highlight avrasm"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></tbody></table></figure><h6 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h6><p>创建文件夹来存放博客 <code>mkdir [folder]</code></p><figure class="highlight arduino"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir MyHexoBlog<br></code></pre></td></tr></tbody></table></figure><h6 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h6><figure class="highlight csharp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">hexo <span class="hljs-keyword">init</span> MyHexoBlog<br></code></pre></td></tr></tbody></table></figure><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></tbody></table></figure><h3 id="本地启动效果如下"><a href="#本地启动效果如下" class="headerlink" title="本地启动效果如下:"></a>本地启动效果如下:</h3><figure class="highlight livecodeserver"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">启动成功后，浏览器访问： <span class="hljs-keyword">http</span>:localhost:<span class="hljs-number">4000</span><br></code></pre></td></tr></tbody></table></figure><h3 id="image-20210515161040198-Users-xiekecheng-Library-Application-Support-typora-user-images-image-20210515161040198-png"><a href="#image-20210515161040198-Users-xiekecheng-Library-Application-Support-typora-user-images-image-20210515161040198-png" class="headerlink" title="![image-20210515161040198](/Users/xiekecheng/Library/Application Support/typora-user-images/image-20210515161040198.png)"></a>![image-20210515161040198](/Users/xiekecheng/Library/Application Support/typora-user-images/image-20210515161040198.png)</h3><h3 id="hexo常用命令如下"><a href="#hexo常用命令如下" class="headerlink" title="hexo常用命令如下"></a>hexo常用命令如下</h3><figure class="highlight verilog"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog">#服务器<br>hexo init                       #初始化hexo<br>hexo g                          #等于hexo <span class="hljs-keyword">generate</span> =&gt;生成静态页面到public目录<br>hexo s                          #等于hexo server =&gt;启动hexo服务，通过<span class="hljs-number">4000</span>端口访问。<br>hexo n 文章名称                  #等于hexo <span class="hljs-keyword">new</span> <span class="hljs-string">"文章名称"</span> =&gt;新建文章。<br>hexo p                          #等于hexo publish<br>hexo d                          #等于hexo deploy =&gt;目录部署到GitHub。<br><br>hexo clean                      #清除缓存，网页正常情况下忽略此条命令<br>hexo <span class="hljs-keyword">generate</span> --watch           #监视文件变动<br><br>hexo d -g                       #生成部署合并为一条命令<br></code></pre></td></tr></tbody></table></figure><h3 id="6-关联github"><a href="#6-关联github" class="headerlink" title="6.关联github"></a>6.关联github</h3><p>github.com 申请账户</p><p>创建仓库 Repository name: <code>xiekecheng.github.io</code>  与用户名一致</p><h3 id="安装自动部署插件"><a href="#安装自动部署插件" class="headerlink" title="安装自动部署插件"></a>安装自动部署插件</h3><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></tbody></table></figure><h4 id="发布到Github中"><a href="#发布到Github中" class="headerlink" title="发布到Github中"></a>发布到Github中</h4><p>修改 _config.yml文件 配置</p><figure class="highlight dts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html</span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  branch:</span> master<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/gallenzhang/gallenzhang.github.io.git</span><br></code></pre></td></tr></tbody></table></figure><p>生成静态网页并部署</p><figure class="highlight ebnf"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span><br></code></pre></td></tr></tbody></table></figure><h3 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h3><p>如果部署的时候出现 “ERROR Deployer not found: git” 错误提示，那是因为没有安装<code>hexo-deployer-git</code>插件。输入下面的命令，安装下插件重新试一下就好了。</p><figure class="highlight ada"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></tbody></table></figure><h3 id="7-通过Github网址来访问"><a href="#7-通过Github网址来访问" class="headerlink" title="7.通过Github网址来访问"></a>7.通过Github网址来访问</h3><p>浏览器中输入 xiekecheng.github.io 可以看到已部署成功</p><p>![image-20210515170312113](/Users/xiekecheng/Library/Application Support/typora-user-images/image-20210515170312113.png)</p><h3 id="8-博文参考"><a href="#8-博文参考" class="headerlink" title="8.博文参考"></a>8.博文参考</h3><p>hexo搭建参考于<code>https://zhuanlan.zhihu.com/p/192376753</code></p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/15/hello-world/"/>
      <url>2021/05/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
