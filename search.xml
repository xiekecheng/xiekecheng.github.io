<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Canvas</title>
      <link href="2021/06/07/day37-canvas/"/>
      <url>2021/06/07/day37-canvas/</url>
      
        <content type="html"><![CDATA[<h1 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>canvas是html5的一个标签，代表一个画布，可以在上面进行绘画、动画等操作。画布默认大小是300*150。</p><p>canvas标签本省只是画布，要实现上面有文字、线条等呈现，需要使用js实现。总之，画布上一切的呈现，都需要使用js来实现。canvas标签本质上就是一张图片，只是一张空白图片。</p><p>画布大小不能使用样式控制，用样式调整的是一个可视区域，其实真实的大小，还是一样的，只是在画布上画内容的话，会等比例放大。调整画布大小，需要在标签上直接添加width和height属性。</p><p>canvas标签也是可以放文字的，只是当canvas标签不被浏览器支持的时候，会显示，例如ie8。</p><h1 id="canvas简单使用"><a href="#canvas简单使用" class="headerlink" title="canvas简单使用"></a>canvas简单使用</h1><ol><li><p>获取canvas元素</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取canvas元素工具箱 - 上下文</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>画图形</p><p> 先确定起始点</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x轴坐标<span class="token punctuation">,</span>y轴坐标<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 从起始点开始画直线</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 描边</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 填充颜色</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 想告诉canvas绘制的下条凸显和之前没关系,则使用</p> <pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>结尾使用ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="画虚线"><a href="#画虚线" class="headerlink" title="画虚线"></a>画虚线</h4><pre class="line-numbers language-none"><code class="language-none">ctx.setLineDash(参数);// 参数：/*数组 - 虚线方案，在数组中描述线条和空白的长度，然后不停的重复两个值，第一个值是线条长度，第二个值是空白长度 - 重复三个值，第一个值是线条长度，第二个值空白长度，第三个值是线条的长度；接下来是第二个值的空白长度，第二个值是线条的长度，第三个值是空白的长度 - 重复四个值，第一个值是线条长度，第二个值是空白长度，第三个值是线条的长度，第四个值是空白长度 - 重复总结：数组中有奇数个元素，那重复的个数就是 2*奇数个数组中有偶数个元素，那重复的个数就是偶数个*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取虚线的方法"><a href="#获取虚线的方法" class="headerlink" title="获取虚线的方法"></a>获取虚线的方法</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">getLineDash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 获取到的是一个数组，数组中记录了一段不重复的虚线方案</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="实现纯色的颜色渐变"><a href="#实现纯色的颜色渐变" class="headerlink" title="实现纯色的颜色渐变"></a>实现纯色的颜色渐变</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span>i<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment">// ctx.lineTo(150,120)</span>    ctx<span class="token punctuation">.</span>strokeStyle  <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgb(255,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">255</span><span class="token operator">-</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token number">255</span><span class="token operator">-</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="画弧线"><a href="#画弧线" class="headerlink" title="画弧线"></a>画弧线</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        canvas <span class="token punctuation">{</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>canvas width <span class="token operator">=</span><span class="token string">"600"</span> height <span class="token operator">=</span><span class="token string">"300"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>               <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h4><p>画矩形需要设置起点和矩形的宽高</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">rect</span><span class="token punctuation">(</span>起点x<span class="token punctuation">,</span>起点y<span class="token punctuation">,</span>宽<span class="token punctuation">,</span>高<span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>        canvas <span class="token punctuation">{</span>            border<span class="token operator">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>canvas width <span class="token operator">=</span><span class="token string">"600"</span> height <span class="token operator">=</span><span class="token string">"300"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>        <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接绘制矩形并描边</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">strockRect</span><span class="token punctuation">(</span>起点x<span class="token punctuation">,</span>起点y<span class="token punctuation">,</span>宽<span class="token punctuation">,</span>高<span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">strokeRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接绘制矩形并填充</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">ctx<span class="token punctuation">.</span><span class="token function">strockRect</span><span class="token punctuation">(</span>起点x<span class="token punctuation">,</span>起点y<span class="token punctuation">,</span>宽<span class="token punctuation">,</span>高<span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="绘制等分圆形"><a href="#绘制等分圆形" class="headerlink" title="绘制等分圆形"></a>绘制等分圆形</h4><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        canvas {            border: 1px solid black;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;canvas width="600" height="300"&gt; &lt;/canvas&gt;    &lt;script&gt;        var canvas = document.querySelector('canvas');        var ctx = canvas.getContext('2d');        // 设置线段宽度        ctx.lineWidth = 2;        // 半径        var r = 100        // 分成4等分        var num = 4;        var startArc = 0;        for (var i = 1; i &lt;= 4; i++) {            ctx.beginPath();            // 设置画笔放在圆心            ctx.moveTo(100, 100);            // 设置填空的颜色            ctx.fillStyle = getColor();            // 画弧线            ctx.arc(100, 100, r, startArc, (i * 360 / num) * Math.PI / 180);            ctx.closePath();            // 描边            ctx.stroke();            // 填充            ctx.fill();            // 将末尾的角度设置为开始的角度,方便下次循环取值            startArc =  (i * 360 / num) * Math.PI / 180;        }        // 获取随机颜色        function getColor() {            var c = '#';            for (var i = 0; i &lt; 6; i++) {                c += Math.floor(Math.random() * 16).toString(16);            }            return c;        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/20210608185638.png"></p><h4 id="画饼图"><a href="#画饼图" class="headerlink" title="画饼图"></a>画饼图</h4><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置线段宽度</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> width <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">var</span> height <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token comment">//设置圆心</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 半径</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 获取数组里的数的总和</span>    <span class="token keyword">var</span> total <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> startArc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> endArc <span class="token operator">=</span> startArc<span class="token operator">+</span>v<span class="token operator">/</span>total<span class="token operator">*</span><span class="token number">360</span><span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">/</span><span class="token number">180</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>r<span class="token punctuation">,</span>startArc<span class="token punctuation">,</span>endArc<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        startArc<span class="token operator">=</span>endArc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 获取随机颜色</span>    <span class="token keyword">function</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'#'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下图</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210608195527042.png" alt="image-20210608195527042"></p><h4 id="画文字"><a href="#画文字" class="headerlink" title="画文字"></a>画文字</h4><p>画文字用到的方法和属性</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//文字大小</span>ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">'字号大小 字体'</span><span class="token comment">//例</span>ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">'bold 48px serif'</span><span class="token punctuation">;</span>ctx<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span><span class="token string">'Hello world'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//画文字</span>ctx<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span>文本<span class="token punctuation">,</span>文字开始x<span class="token punctuation">,</span>文字开始y<span class="token punctuation">)</span> <span class="token comment">// 描边</span>ctx<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span>文本<span class="token punctuation">,</span>文字开始x<span class="token punctuation">,</span>文字开始y<span class="token punctuation">)</span> <span class="token comment">// 填充文字</span><span class="token comment">//上下对齐方式</span>ctx<span class="token punctuation">.</span>textBaseLine <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token comment">// 取值：</span><span class="token comment">/*默认是baselinebottom：底线对齐top：顶线对齐middle：中线对齐*/</span><span class="token comment">//左右对齐方式</span>ctx<span class="token punctuation">.</span>textAlign <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token comment">// 取值：基于我们设置的文字坐标来对齐的</span><span class="token comment">/*left - 默认值，左对齐right - 右对齐*/</span><span class="token comment">//获取文本内容总宽度</span>ctx<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>文本内容<span class="token punctuation">)</span><span class="token comment">// 获取到一个对象，其中包含width属性就是文字的宽度</span>ctx<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>文本内容<span class="token punctuation">)</span><span class="token punctuation">.</span>width   <span class="token comment">//计算方式是字的个数乘fontsize</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画文字代码</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'canvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置线段宽度</span>    ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 获取canvas宽高</span>    <span class="token keyword">var</span> width <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>width<span class="token punctuation">;</span>    <span class="token keyword">var</span> height <span class="token operator">=</span> ctx<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">'48px serif'</span>    ctx<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span><span class="token string">'我是天下第一帅'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下:</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210608201325182.png" alt="image-20210608201325182"></p><h4 id="使用Echarts绘制饼图"><a href="#使用Echarts绘制饼图" class="headerlink" title="使用Echarts绘制饼图"></a>使用Echarts绘制饼图</h4><p><a href="https://echarts.apache.org/zh/index.html">Echarts官网</a></p><p>利用Echarts,代入数据即可生成美观好看的折线图..柱状图,饼图之类的图形</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>ECharts<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 引入 echarts<span class="token punctuation">.</span>js <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./js/echarts.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 可通过cdn引入echarts<span class="token punctuation">.</span>js文件 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/echarts@5.1.1/dist/echarts.min.js"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 为ECharts准备一个具备大小（宽高）的Dom <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"main"</span> style<span class="token operator">=</span><span class="token string">"width: 900px;height:600px;"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>        <span class="token comment">// import * as echarts from 'echarts';</span>        <span class="token comment">// var echarts = require('echarts');</span>        <span class="token keyword">var</span> chartDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> myChart <span class="token operator">=</span> echarts<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>chartDom<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> option<span class="token punctuation">;</span>        option <span class="token operator">=</span> <span class="token punctuation">{</span>            legend<span class="token operator">:</span> <span class="token punctuation">{</span>                top<span class="token operator">:</span> <span class="token string">'bottom'</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            toolbox<span class="token operator">:</span> <span class="token punctuation">{</span>                show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                feature<span class="token operator">:</span> <span class="token punctuation">{</span>                    mark<span class="token operator">:</span> <span class="token punctuation">{</span>                        show<span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    dataView<span class="token operator">:</span> <span class="token punctuation">{</span>                        show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        readOnly<span class="token operator">:</span> <span class="token boolean">false</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    restore<span class="token operator">:</span> <span class="token punctuation">{</span>                        show<span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    saveAsImage<span class="token operator">:</span> <span class="token punctuation">{</span>                        show<span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            series<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                name<span class="token operator">:</span> <span class="token string">'年龄分布'</span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">'pie'</span><span class="token punctuation">,</span>                radius<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                center<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'50%'</span><span class="token punctuation">,</span> <span class="token string">'50%'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                roseType<span class="token operator">:</span> <span class="token string">'area'</span><span class="token punctuation">,</span>                itemStyle<span class="token operator">:</span> <span class="token punctuation">{</span>                    borderRadius<span class="token operator">:</span> <span class="token number">8</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// var arr = [22,18,31,17,42,32,15,22,30];</span>                data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'15-20岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'20-25岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">31</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'25-30岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'30-35岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'35-40岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'40-45岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'45-50岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'50-55岁'</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>                        value<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>                        name<span class="token operator">:</span> <span class="token string">'55-60岁'</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        option <span class="token operator">&amp;&amp;</span> myChart<span class="token punctuation">.</span><span class="token function">setOption</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图:</p><p><img src="https://raw.githubusercontent.com/xiekecheng/ImageStorage/main/image-20210608205136100.png" alt="image-20210608205136100"></p>]]></content>
      
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/06/04/shi-xian-ao-tu-zi/"/>
      <url>2021/06/04/shi-xian-ao-tu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="实现凹凸字"><a href="#实现凹凸字" class="headerlink" title="实现凹凸字"></a>实现凹凸字</h1><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        body {            background-color: gray;        }        div:nth-child(1) {            width: 600;            height: 200px;            text-align: center;            font-size: 100px;            margin: 100px auto;            font-weight: bold;            color: gray;            text-shadow:                -1px -1px 1px white,                1px 1px 1px black        }        div:nth-child(2) {            width: 600;            height: 200px;            text-align: center;            font-size: 100px;            margin: 100px auto;            font-weight: bold;            color: gray;            text-shadow:                -1px -1px 1px black,                1px 1px 1px white        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;我是好程序员&lt;/div&gt;    &lt;div&gt;我是好程序员&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>build-hexo</title>
      <link href="2021/05/15/build-hexo/"/>
      <url>2021/05/15/build-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Mac环境下基于hexo-github搭建个人博客"><a href="#Mac环境下基于hexo-github搭建个人博客" class="headerlink" title="Mac环境下基于hexo+github搭建个人博客"></a>Mac环境下基于hexo+github搭建个人博客</h1><h2 id="1安装HomeBrew"><a href="#1安装HomeBrew" class="headerlink" title="1安装HomeBrew"></a><code>1安装HomeBrew</code></h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否安装成功: brew –version</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>用brew安装Git,如果已安装,则忽略该步骤</p><pre class="line-numbers language-none"><code class="language-none">git --version //查看是否安装成功<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用brew-安装nvm"><a href="#使用brew-安装nvm" class="headerlink" title="使用brew 安装nvm"></a>使用brew 安装nvm</h3><p><code>brew install nvm</code></p><h3 id="创建-nvm文件"><a href="#创建-nvm文件" class="headerlink" title="创建.nvm文件"></a>创建.nvm文件</h3><p><code>mkdir ~/.nvm</code></p><p>在 ~/.bash_profile 或者 ~/.zshrc 中添加下面命令</p><pre class="line-numbers language-none"><code class="language-none">export NVM_DIR="$HOME/.nvm"[ -s "/usr/local/opt/nvm/nvm.sh" ] &amp;&amp; . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm[ -s "/usr/local/opt/nvm/etc/bash_completion" ] &amp;&amp; . "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>source一下</p><pre class="line-numbers language-none"><code class="language-none">Source ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-安装node"><a href="#4-安装node" class="headerlink" title="4.安装node"></a>4.安装node</h3><p>通过nvm安装node</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">nvm ls-remote                   #查看node所有版本nvm install v12.12.0            #安装你要的版本nvm use v12.12.0                #使用指定的版本nvm alias default v12.12.0      #默认版本，每次打开终端，都自动使用该版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装是否成功：node -v 、npm -v</p><p>查看nvm使用帮助:</p><pre class="line-numbers language-none"><code class="language-none">nvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-安装配置Hexo"><a href="#5-安装配置Hexo" class="headerlink" title="5.安装配置Hexo"></a>5.安装配置Hexo</h3><h6 id="利用npm命令安装"><a href="#利用npm命令安装" class="headerlink" title="利用npm命令安装"></a>利用npm命令安装</h6><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h6><p>创建文件夹来存放博客 <code>mkdir [folder]</code></p><pre class="line-numbers language-none"><code class="language-none">mkdir MyHexoBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h6><pre class="line-numbers language-none"><code class="language-none">hexo init MyHexoBlog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><pre class="line-numbers language-none"><code class="language-none">hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="本地启动效果如下"><a href="#本地启动效果如下" class="headerlink" title="本地启动效果如下:"></a>本地启动效果如下:</h3><pre class="line-numbers language-none"><code class="language-none">启动成功后，浏览器访问： http:localhost:4000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="image-20210515161040198-Users-xiekecheng-Library-Application-Support-typora-user-images-image-20210515161040198-png"><a href="#image-20210515161040198-Users-xiekecheng-Library-Application-Support-typora-user-images-image-20210515161040198-png" class="headerlink" title="![image-20210515161040198](/Users/xiekecheng/Library/Application Support/typora-user-images/image-20210515161040198.png)"></a>![image-20210515161040198](/Users/xiekecheng/Library/Application Support/typora-user-images/image-20210515161040198.png)</h3><h3 id="hexo常用命令如下"><a href="#hexo常用命令如下" class="headerlink" title="hexo常用命令如下"></a>hexo常用命令如下</h3><pre class="line-numbers language-none"><code class="language-none">#服务器hexo init                       #初始化hexohexo g                          #等于hexo generate =&gt;生成静态页面到public目录hexo s                          #等于hexo server =&gt;启动hexo服务，通过4000端口访问。hexo n 文章名称                  #等于hexo new "文章名称" =&gt;新建文章。hexo p                          #等于hexo publishhexo d                          #等于hexo deploy =&gt;目录部署到GitHub。hexo clean                      #清除缓存，网页正常情况下忽略此条命令hexo generate --watch           #监视文件变动hexo d -g                       #生成部署合并为一条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-关联github"><a href="#6-关联github" class="headerlink" title="6.关联github"></a>6.关联github</h3><p>github.com 申请账户</p><p>创建仓库 Repository name: <code>xiekecheng.github.io</code>  与用户名一致</p><h3 id="安装自动部署插件"><a href="#安装自动部署插件" class="headerlink" title="安装自动部署插件"></a>安装自动部署插件</h3><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="发布到Github中"><a href="#发布到Github中" class="headerlink" title="发布到Github中"></a>发布到Github中</h4><p>修改 _config.yml文件 配置</p><pre class="line-numbers language-none"><code class="language-none"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  branch: master  repo: https://github.com/gallenzhang/gallenzhang.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成静态网页并部署</p><pre class="line-numbers language-none"><code class="language-none">hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h3><p>如果部署的时候出现 “ERROR Deployer not found: git” 错误提示，那是因为没有安装<code>hexo-deployer-git</code>插件。输入下面的命令，安装下插件重新试一下就好了。</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-通过Github网址来访问"><a href="#7-通过Github网址来访问" class="headerlink" title="7.通过Github网址来访问"></a>7.通过Github网址来访问</h3><p>浏览器中输入 xiekecheng.github.io 可以看到已部署成功</p><p>![image-20210515170312113](/Users/xiekecheng/Library/Application Support/typora-user-images/image-20210515170312113.png)</p><h3 id="8-博文参考"><a href="#8-博文参考" class="headerlink" title="8.博文参考"></a>8.博文参考</h3><p>hexo搭建参考于<code>https://zhuanlan.zhihu.com/p/192376753</code></p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/15/hello-world/"/>
      <url>2021/05/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下安装jdk1.8</title>
      <link href="2019/11/28/linux-install-jdk1-8/"/>
      <url>2019/11/28/linux-install-jdk1-8/</url>
      
        <content type="html"><![CDATA[<p>##1.进入Oracle获取下载地址</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><ol><li>创建安装目录</li></ol><p><code>mkdir /usr/local/java/</code></p><ol start="2"><li>解压至安装目录</li></ol><p><code>tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/local/java/</code></p><h2 id="3-设置环境变量"><a href="#3-设置环境变量" class="headerlink" title="3.设置环境变量"></a>3.设置环境变量</h2><p><code>vim /etc/profile</code></p><p>在行尾添加</p><pre class="line-numbers language-none"><code class="language-none">export JAVA_HOME=/usr/local/java/jdk1.8.0_171export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使环境变量生效</p><p><code>source /etc/profile</code></p><p>添加软链接</p><p><code>ln -s /usr/local/java/jdk1.8.0_171/bin/java /usr/bin/java</code></p><p>检查是否生效</p><p><code>java -versioin</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpirngBoot整合Swagger2</title>
      <link href="2019/11/20/spirngboot-integrate-swagger/"/>
      <url>2019/11/20/spirngboot-integrate-swagger/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Swagger2"><a href="#SpringBoot整合Swagger2" class="headerlink" title="#SpringBoot整合Swagger2"></a>#SpringBoot整合Swagger2</h1><ol><li><p>项目结构</p><p>![image-20191120101922913](/Users/xiekc/Library/Application Support/typora-user-images/image-20191120101922913.png)</p></li><li><p>新建SpringBoot项目，引入相关依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--swargger2--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--swarggerUI--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Swagger配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@EnableSwagger2</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.xiekc.vhr.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"接口测试文档"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"xiekc"</span><span class="token punctuation">,</span><span class="token string">"xiekecheng.github.io"</span><span class="token punctuation">,</span><span class="token string">"kc.xie@foxmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"v1.0"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"API测试文档"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">license</span><span class="token punctuation">(</span><span class="token string">"Apache2.0"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">licenseUrl</span><span class="token punctuation">(</span><span class="token string">"http://www . apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/User"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"getUser"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/User"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"addUser"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开localhost:8080/swagger-ui.html 可查看接口</p><p>![image-20191120101639701](/Users/xiekc/Library/Application Support/typora-user-images/image-20191120101639701.png)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="2019/09/19/vue/"/>
      <url>2019/09/19/vue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vhr 项目记录</title>
      <link href="2019/09/09/vhr-project/"/>
      <url>2019/09/09/vhr-project/</url>
      
        <content type="html"><![CDATA[<h2 id="Vhr项目记录"><a href="#Vhr项目记录" class="headerlink" title="Vhr项目记录"></a>Vhr项目记录</h2><h3 id="涉及技术"><a href="#涉及技术" class="headerlink" title="涉及技术"></a>涉及技术</h3><ol><li>SpringBoot</li><li>Spring Security</li><li>Redis</li><li>POI/邮件发送/消息中间件</li><li>MySQL</li><li>Vue</li><li>axios</li><li>ElementUI</li><li>Vues</li></ol><p>Vue 学习规划</p><ol><li>没有必要买书</li><li>jQuery，JavaScript</li><li>官网学习Vue</li></ol><h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaboy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaboy</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'javaboy'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token operator">:</span> <span class="token string">'&lt;h1&gt;hello world&lt;/h1&gt;'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SpringBoot中，日期的区别：</p><p>[<code>@JsonFormat](https://github.com/JsonFormat)(pattern="yyyy-MM-dd hh:mm:ss", locale="zh", timezone="GMT+8")</code></p><p>yyyy-MM-dd HH:mm:ss  这是24小时制</p><p>yyyy-MM-dd HH:mm:ss  这是12小时制</p><p>在标准的SQL语句中，一次插入一条记录的INSERT语句只有一种形式。</p><p>批量插入效率高</p><p>INSERT INTO tablename(列名…) VALUES(列值);</p><p>而在MySQL中还有另外一种形式，就是set</p><p>单条插入效率高：</p><p>INSERT INTO tablename SET column_name1 = value1, column_name2 = value2，…;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合MybatisPlus</title>
      <link href="2019/09/06/mybtais-plus/"/>
      <url>2019/09/06/mybtais-plus/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot整合MybatisPlus"><a href="#SpringBoot整合MybatisPlus" class="headerlink" title="SpringBoot整合MybatisPlus"></a>SpringBoot整合MybatisPlus</h2><p>sql建表以及数据</p> <pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user` (  `id` bigint(20) NOT NULL COMMENT '主键',  `name` varchar(30) DEFAULT NULL COMMENT '姓名',  `age` int(11) DEFAULT NULL COMMENT '年龄',  `email` varchar(50) DEFAULT NULL COMMENT '邮箱',  `manager_id` bigint(20) DEFAULT NULL COMMENT '直属上级id',  `create_time` datetime DEFAULT NULL COMMENT '创建时间',  PRIMARY KEY (`id`),  KEY `manager_fk` (`manager_id`),  CONSTRAINT `manager_fk` FOREIGN KEY (`manager_id`) REFERENCES `user` (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;-- ------------------------------ Records of user-- ----------------------------BEGIN;INSERT INTO `user` VALUES (1087982257332887553, '大boss', 40, 'boss@baomidou.com', NULL, '2019-01-11 14:20:20');INSERT INTO `user` VALUES (1088248166370832385, '王天风', 25, 'wtf@baomidou.com', 1087982257332887553, '2019-02-05 11:12:22');INSERT INTO `user` VALUES (1088250446457389058, '李艺伟', 28, 'lyw@baomidou.com', 1088248166370832385, '2019-02-14 08:31:16');INSERT INTO `user` VALUES (1094590409767661570, '张雨琪', 31, 'zjq@baomidou.com', 1088248166370832385, '2019-01-14 09:15:15');INSERT INTO `user` VALUES (1094592041087729666, '刘红雨', 32, 'lhm@baomidou.com', 1088248166370832385, '2019-01-14 09:48:16');COMMIT;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建SpringBoot项目，引入相关依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在application.yml中配置数据源</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 配置数据源</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mp<span class="token punctuation">?</span>useSSL=false<span class="token important">&amp;serverTimeZone=GMT%2B8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写User类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment">//主键</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">//姓名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//年龄</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token comment">//邮箱</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token comment">//管理员ID</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> managerId<span class="token punctuation">;</span>    <span class="token comment">//创建时间</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写UserMapper接口 ，只需要继承BaseMapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在测试类中进行测试，使用selectList(null)输出所有数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MpApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker command</title>
      <link href="2019/08/19/docker-command/"/>
      <url>2019/08/19/docker-command/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><ul><li><p><code>docker pull      获取images</code></p></li><li><p><code>docker build    创建image</code></p></li><li><p><code>docker images</code></p></li><li><p><code>docker run     运行container</code></p></li><li><p><code>docker ps     列出container</code></p></li><li><p><code>docker rm     删除container</code></p></li><li><p><code>docker rmi     删除image</code></p></li><li><p><code>docker cp       在houst和container之间拷贝文件</code></p></li><li><p><code>docker commit      保存改动为新的image</code></p></li></ul><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><pre class="line-numbers language-none"><code class="language-none">FROM UBUNTUMAINTAINER xiekcRUN sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/source.listRUN apt-get updateRUN apt-get install -y nginxCOPY index.html /var/www/htmlENTRYPOINT ["/usr/sbin/nginx","-g","daemon off;"]EXPOSE 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建index.html</p><pre class="line-numbers language-none"><code class="language-none">touch index.htmlvim index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构建镜像</p><pre class="line-numbers language-none"><code class="language-none">docker build -t xiekc/hello_nginx .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>.代表是在当前目录的上下文</p><h2 id="Docker-语法"><a href="#Docker-语法" class="headerlink" title="Docker 语法"></a>Docker 语法</h2><pre class="line-numbers language-none"><code class="language-none">FROM base imageRUN  执行命令ADD  添加文件COPY  拷贝文件CMD  执行命令EXPOSE   暴露端口WORKDIR指定路径MAINTAINER  维护者ENV   设定环境变量ENTRYPOINT容器入口USER指定用户VOLUMEmount point<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker exec -it nginx /bin/bash</code>   进入容器</p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><pre class="line-numbers language-none"><code class="language-none">host  宿主机image镜像container容器registry仓库daemon守护进程client客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搜索镜像</p><pre class="line-numbers language-none"><code class="language-none">docker search docker pulldocker push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p><code>docker ps</code> 查看正在运行的容器</p><p><code>docker ps -a</code> 查看所有容器</p><p>查看容器时涉及到的参数：</p><ul><li>CONTAINER ID:CONTAINER ID是指容器的id，是一个唯一标识符,这是一个64位的十六进制整数，在不会混淆的情况下可以只采用id的前几位进行标识一个容器。</li><li>IMAGE:IMAGE表示创建容器时使用的镜像。</li><li>COMMAND:COMMAND表示容器最后运行的命令。</li><li>CREATED:创建容器的时间。</li><li>STATUS:容器的状态，这里可能显示一个容器启动时间，也能显示容器关闭时间。具体显示哪个要看容器当前的状态。</li><li>PORTS:容器对外开放的端口。</li><li>NAMES:容器的名字，如果不设置，会有一个默认的名字。</li></ul><h3 id="查看最新创建的容器"><a href="#查看最新创建的容器" class="headerlink" title="查看最新创建的容器"></a>查看最新创建的容器</h3><p><code>docker ps -l</code></p><h3 id="查看最新创建的n个容器"><a href="#查看最新创建的n个容器" class="headerlink" title="查看最新创建的n个容器"></a>查看最新创建的n个容器</h3><p><code>docker ps -n=xxx</code></p><h3 id="容器停止"><a href="#容器停止" class="headerlink" title="容器停止"></a>容器停止</h3><p>通过<code>docker stop</code>命令可以终止一个容器，可以通过name或者id终止一个容器</p><h3 id="容器删除"><a href="#容器删除" class="headerlink" title="容器删除"></a>容器删除</h3><p>如果容器停止后，不在需要这个容器，可以执行<code>docker rm</code>命令删除一个容器。删除容器时，只能删除已经停止的容器，不能删除正在运行的容器。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ启动失败</title>
      <link href="2019/08/16/rabbitmq-boot-fail/"/>
      <url>2019/08/16/rabbitmq-boot-fail/</url>
      
        <content type="html"><![CDATA[<p>使用brew install rabbitmq安装rabbitmq之后，用<code>rabbitmq-server</code>命令启动失败</p><p>以下是报错信息：</p><pre class="line-numbers language-none"><code class="language-none">##  ##  ##  ##      RabbitMQ 3.7.16. Copyright (C) 2007-2019 Pivotal Software, Inc.  ##########  Licensed under the MPL.  See https://www.rabbitmq.com/  ######  ##  ##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log                    /usr/local/var/log/rabbitmq/rabbit@localhost_upgrade.log              Starting broker...BOOT FAILED===========Error description:    init:do_boot/3    init:start_em/1    rabbit:start_it/1 line 478    rabbit:broker_start/0 line 354    rabbit:start_apps/2 line 572    app_utils:manage_applications/6 line 126    lists:foldl/3 line 1263    rabbit:'-handle_app_error/1-fun-0-'/3 line 693throw:{could_not_start,rabbitmq_mqtt,       {rabbitmq_mqtt,        {{shutdown,          {failed_to_start_child,'rabbit_mqtt_listener_sup_:::1883',           {shutdown,            {failed_to_start_child,             {ranch_listener_sup,{acceptor,{0,0,0,0,0,0,0,0},1883}},             {shutdown,              {failed_to_start_child,ranch_acceptors_sup,               {listen_error,                {acceptor,{0,0,0,0,0,0,0,0},1883},                eaddrinuse}}}}}}},         {rabbit_mqtt,start,[normal,[]]}}}}Log file(s) (may contain more information):   /usr/local/var/log/rabbitmq/rabbit@localhost.log   /usr/local/var/log/rabbitmq/rabbit@localhost_upgrade.log{"init terminating in do_boot",{could_not_start,rabbitmq_mqtt,{rabbitmq_mqtt,{{shutdown,{failed_to_start_child,'rabbit_mqtt_listener_sup_:::1883',{shutdown,{failed_to_start_child,{ranch_listener_sup,{acceptor,{0,0,0,0,0,0,0,0},1883}},{shutdown,{failed_to_start_child,ranch_acceptors_sup,{listen_error,{acceptor,{0,0,0,0,0,0,0,0},1883},eaddrinuse}}}}}}},{rabbit_mqtt,start,[normal,[]]}}}}}init terminating in do_boot ({could_not_start,rabbitmq_mqtt,{rabbitmq_mqtt,{{shutdown,{_}},{rabbit_mqtt,start,[_]}}}})Crash dump is being written to: /usr/local/var/log/rabbitmq/erl_crash.dump...done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因是1883端口被占用了，使用<code>lsof -i:1883</code> 可找到占用该端口的进程，然后杀死该进程即可，例如：</p><pre class="line-numbers language-none"><code class="language-none">lsof -i:1883<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">COMMAND  PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAMEjava    9705 xiekc  138u  IPv6 0xb5b23c47a591fc29      0t0  TCP *:ibm-mqisdp (LISTEN)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>杀死PID为  9705的进程，再执行<code>rabbitmq-server</code> 即可正常启动rabbitmq</p><p><code>rabbitmq-server</code></p><pre class="line-numbers language-none"><code class="language-none">##  ## ##  ##      RabbitMQ 3.7.16. Copyright (C) 2007-2019 Pivotal Software, Inc. ##########  Licensed under the MPL.  See https://www.rabbitmq.com/ ######  ## ##########  Logs: /usr/local/var/log/rabbitmq/rabbit@localhost.log                   /usr/local/var/log/rabbitmq/rabbit@localhost_upgrade.log             Starting broker...completed with 6 plugins.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器输入<code>http://localhost:15672/</code> 可进入rabbitmq登陆页面</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g61bkmoz9tj322y0kmq46.jpg" alt="image-20190816104026071"></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dock run privoxy</title>
      <link href="2019/08/16/dock-run-privoxy/"/>
      <url>2019/08/16/dock-run-privoxy/</url>
      
        <content type="html"><![CDATA[<p>配置好SSR后，只能在浏览器和应用上翻墙，但是mac的命令行还无法翻墙，所以需要配置privoxy让命令行可以翻墙。</p><ol><li><p>安装privoxy</p><p><code>brew install privoxy</code></p></li><li><p>配置privoxy，打开配置文件  /usr/local/etc/privoxy/config</p><pre class="line-numbers language-none"><code class="language-none">vim /usr/local/etc/privoxy/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾添加两项配置</p><pre class="line-numbers language-none"><code class="language-none">listen-address 0.0.0.0:8118forward-socks5 / localhost:1080 .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动privoxy</p><p><code>sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot integrate AMQP</title>
      <link href="2019/08/15/springboot-integrate-amqp/"/>
      <url>2019/08/15/springboot-integrate-amqp/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><ol><li><p>RabbitMQ简介</p><p>RabbitMQ是一个实现了AMQP的开源消息中间件，使用高性能Erlang编写。RabbitMQ具有可靠性、支持多种协议、高可用、支持消息集群以及多语言客户端的特点，在分布式系统中存储转发消息，具有不错的性能表现。</p></li><li><p>RabbitMQ的安装</p><p>由于RabbitMQ使用Erlang编写，因此需要先安装Erlang环境</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合JMS</title>
      <link href="2019/08/15/springboot-integrate-activemq/"/>
      <url>2019/08/15/springboot-integrate-activemq/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装ActiveMQ"><a href="#下载安装ActiveMQ" class="headerlink" title="下载安装ActiveMQ"></a>下载安装ActiveMQ</h2><pre class="line-numbers language-none"><code class="language-none">tar -zxvf 解压cd apache-activemq-5.15.4./activemq start   启动ActiveMQ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>访问ActiveMQ，8161是ActiveMQ的端口</p><p><code>localhost:8161    </code></p><p>单机Manage ActiveMQ broker进入管理界面，用户名密码都是admin</p><h2 id="整合Springboot"><a href="#整合Springboot" class="headerlink" title="整合Springboot"></a>整合Springboot</h2><p>1、创建SpringBoot项目，添加ActiveMQ依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--引入activeMQ依赖--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在application.properties 中配置activeMQ</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#activemq配置信息</span><span class="token comment">#配置broker地址，默认端口是61616</span><span class="token attr-name">spring.activemq.broker-url</span><span class="token punctuation">=</span><span class="token attr-value">tcp://localhost:61616</span><span class="token comment">#配置信任所有的包，目的是支持发送对象信息</span><span class="token attr-name">spring.activemq.packages.trust-all</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#配置用户名和密码</span><span class="token attr-name">spring.activemq.user</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span class="token attr-name">spring.activemq.password</span><span class="token punctuation">=</span><span class="token attr-value">admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在项目配置类中提供一个消息队列Bean，该Bean的实例由ActiveMQ提供</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActivemqtestApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ActivemqtestApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">"amq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、创建一个JMS组件来完成消息的发送与接收，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JmsComponent</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">JmsMessagingTemplate</span> messagingTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">Queue</span> queue<span class="token punctuation">;</span>    <span class="token comment">/**     * messagingTemplate   JMS消息发送模板     * this.queue是消息队列，msg是消息     * @param msg     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        messagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听消息队列里的消息     * @param message     */</span>    <span class="token annotation punctuation">@JmsListener</span><span class="token punctuation">(</span>destination<span class="token operator">=</span><span class="token string">"amq"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"receive:"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">public class Message implements Serializable {    private String content;    private Date date;    //省略getter和setter方法}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令总结</title>
      <link href="2019/08/15/linux-command/"/>
      <url>2019/08/15/linux-command/</url>
      
        <content type="html"><![CDATA[<p><code>ls /</code></p><p>显示根目录下的文件</p><p><code>ll</code>或<code>ls -l</code>  查看文件属性</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>delete openJDK and install jdk</title>
      <link href="2019/08/14/delete-openjdk-and-install-jdk/"/>
      <url>2019/08/14/delete-openjdk-and-install-jdk/</url>
      
        <content type="html"><![CDATA[<h2 id="一、卸载openJDK"><a href="#一、卸载openJDK" class="headerlink" title="一、卸载openJDK"></a>一、卸载openJDK</h2><p><strong>1、输入以下命令，查看已安装的openJDK版本</strong></p><p><code> rpm -qa|grep jdk</code></p><p><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5zcj9xfofj30ug060764.jpg" alt="image-20190814174239091"></p><p><strong>2、输入以下命令删除已有的openJDK</strong></p><p><code>yum -y remove</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 关闭防火墙</title>
      <link href="2019/08/14/centos-shut-down-firewall/"/>
      <url>2019/08/14/centos-shut-down-firewall/</url>
      
        <content type="html"><![CDATA[<h2 id="关闭防火墙命令"><a href="#关闭防火墙命令" class="headerlink" title="关闭防火墙命令"></a>关闭防火墙命令</h2><pre class="line-numbers language-none"><code class="language-none">firewall-cmd --state #查看默认防火墙状态（关闭后显示not running，开启后显示running）systemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker run -d --hostname my-rabbit --name xiekc-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3-management</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java知识整理</title>
      <link href="2019/08/05/interview/"/>
      <url>2019/08/05/interview/</url>
      
        <content type="html"><![CDATA[<p>声明：从团长公众号整理来的</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&amp;mid=2651938314&amp;idx=1&amp;sn=f0578deb60a719b5ec71c6a0fcea4420&amp;chksm=8d0f3144ba78b8522d85329f6575eea356b4da9732dd7c7fb4dc5189ee0d551c6b159bc2e706&amp;scene=21#wechat_redirect">Java团长</a></p><p><strong>1、JDK与JRE的区别</strong></p><ul><li>JDK： Java开发工具包，提供Java开发环境和运行环境</li><li>JRE： Java运行环境</li></ul><p><strong>2、==与equals 区别？</strong></p><p>== ： 根据基本类型和引用类型，==判断的标准不一样</p><ul><li>基本类型：比较值是否相同</li><li>引用类型：比较的是引用是否相同</li></ul><p>equals ：</p><ul><li>若重写了equals方法，则比较值是否相同</li><li>若未重写equals方法，则比较内存地址是否相同</li></ul><p><strong>3、若两个对象的hashCode()相同，则equals也一定为true，对吗？</strong></p><p>不对，两个对象的hashCode()相同，equals()不一定为true</p><p><strong>4、final在java中的作用</strong></p><ul><li>final修饰类叫最终类，该类不能被继承</li><li>final修饰的方法不能被重写</li><li>final修饰的变量叫常量，常量必须初始化，初始化后，值不能被修改</li></ul><p><strong>5、Java中的Math.round(-1.5) 等于多少？</strong></p><p>等于-1，Math.round 四舍五入，向上取整</p><p><strong>6、String属于基本的数据类型吗？</strong></p><p>String不属于基本的数据类型，基本类型有8中：int、short、byte、long、double、float、char、boolean，而String属于对象</p><p><strong>7、Java中操作字符串有哪些类？他们之间有什么区别？</strong></p><p>操作字符串的有三类：String、StringBuffer、StringBuilder</p><p>String与StringBuffer、StringBuilder的区别是：String生命的是不可变的对象，每次操作都会生成新的String对象，然后将指针指向新的String对象</p><p><strong>8、String str = “i” 与String str = new String(“i”) 是一样的吗？</strong></p><p>不一样，因为内存的分配方式不一样。String str = “i”的方法，java虚拟机会将其分配到常量池中，而String str = new String(“i”) 则会被分配到堆内存中。</p><p><strong>9、如果将字符串翻转？</strong></p><p>使用StringBuffer或StringBuilder的reverse()方法。</p><p>示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//StringBuffer的reverse方法实现字符串翻转</span><span class="token class-name">StringBuffer</span> sbf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sbf<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//gfedcba</span><span class="token comment">//StringBuilder的reverse方法实现字符串反转</span><span class="token class-name">StringBuilder</span> sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"qwerty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sbd<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ytrewq</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10、String 类的常用方法有哪些？</strong></p><p>indexOf() :  返回指定字符串的索引。</p><p>charAt() :  返回指定索引的字符串。</p><p>replace() :   字符串替换。</p><p>trim() :  去除字符串两端空白。</p><p>split() :  分割字符串，返回一个分割后的字符串数组。</p><p>getBytes() :  返回字符串的bite类型数组。</p><p>length() :  返回字符串的长度</p><p>toLowerCase()：将字符串转成小写字母。</p><p>toUpperCase()：将字符串转成大写字符。</p><p>substring()：截取字符串。</p><p>equals()：字符串比较。</p><p><strong>11、抽象类必须要有抽象方法吗？</strong></p><p>不需要、抽象类不一定非要有抽象方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat can eat food"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>抽象类没有抽象方法但可正常运行</p><p><strong>12、普通类与抽象类有哪些区别？</strong></p><p>普通类不能包含抽象方法，而抽象类可以包含抽象方法。</p><p>抽象类不能直接实例化，但普通类可以实例化。</p><p><strong>13、抽象类能用final修饰吗？</strong></p><p>不能，定义抽象类就是让其他类继承的，如果定义为final该类就不能被继承，这样彼此就会产生矛盾，所以final不能修饰抽象类。当抽象类用final修饰时，编辑器会提示如下错误信息：</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g5pkzd1691j31100923zo.jpg" alt="image-20190806065911302"></p><p><strong>14、抽象类与接口有什么区别？</strong></p><p>默认方法实现：抽象类可以有默认的方法来实现；接口不能有默认的方法来实现。</p><p>实现：抽象类的子类使用extends 来继承；接口必须用implements 来实现接口。</p><p>构造函数：抽象类可以有构造函数，接口没有构造函数。</p><p>main方法：抽象类可有main方法，；接口不能有main方法。</p><p>实现数量：类可以实现多个接口，但只能继承一个抽象类。</p><p>访问修饰符：接口中的方法默认使用public修饰；抽象类的方法可以是任意访问修饰符。</p><p><strong>15、Java中的IO流分为几种？</strong></p><p>按功能来分: 输入流（input）、输出流（output）</p><p>按类型区分：①字节流  ②字符流</p><p>字节流与字符流的区别：字节流按8位传输以字节为单位输入输出数据，字符流按16位传输以字符为单位输入输出数据</p><p><strong>16、BIO、NIO、AIO 有什么区别？</strong></p><p>BIO：Block IO 同步阻塞IO，就是平常使用的传统IO，特点是模式简单使用方便，缺点是并发处理能力低。</p><p>NIIO：New IO 同步非阻塞IO，是传统IO的升级，实现了多路复用。</p><p>AIO： Asynchronous IO 是NIO 的升级，也叫NIO2，实现异步非阻塞 IO，异步IO的操作基于事件和回调机制。</p><p><strong>17、Files的常用方法有哪些？</strong></p><ul><li>Files.exists()：检测文件路径是否存在。</li><li>Files.createFile()：创建文件。</li><li>Files.createDirectory()：创建文件夹。</li><li>Files.delete()：删除一个文件或目录。</li><li>Files.copy()：复制文件。</li><li>Files.move()：移动文件。</li><li>Files.size()：查看文件个数。</li><li>Files.read()：读取文件。</li><li>Files.write()：写入文件。</li></ul><p><strong>18、Java容器都有哪些？</strong></p><p>常见容器的图录：</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5se9j5986j30k00ehmxy.jpg" alt="WechatIMG89"></p><p><strong>19、Collection和Collections有什么区别？</strong></p><ul><li>Java.util.Collection 是一个集合接口（集合的一个顶级接口）。它提供对集合对象进行基本操作的通用接口方法。其直接继承接口有List和Set。</li><li>Collections 则是集合类的一个工具类，它提供一系列静态方法，用于对集合中元素进行排序、搜索以及线程安全等各种操作。</li></ul><p><strong>20、List、Set、Map 之间的区别是什么？</strong></p><p><strong>21、 HashMap 和 Hashtable 有什么区别？</strong></p><ul><li>hashMap去掉了HashTable的contains方法，但是加上了containsValue（）和containsKey（）方法。</li><li>hashTable是同步的，而HashMap是非同步的，效率上比HashTable高。</li><li>HashMap允许空键值，而HashTable不允许。</li></ul><p><strong>22、如何决定使用HashMap还是TreeMap？</strong></p><p>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，如果需要对一个有序的key集合进行遍历，则选择TreeMap</p><p><strong>23、说一下HashMap的实现原理？</strong></p><p>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 </p><p>HashMap的数据结构： 在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。</p><p>当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。</p><p>需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)。</p><p><strong>24、说一下HashSet的实现原理？</strong></p><ul><li>HashSet的底层由HashMap实现。</li><li>HashSet的值存放于HashMap的key上</li><li>HashMap的value统一为PRESENT</li></ul><p><strong>25、ArrayList和LinkedList的区别是什么？</strong></p><p>最明显的区别是ArrayList的底层数据结构是数组，支持随机访问。LinkedList的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList的时间复杂度是O(1),而LinkedList的时间复杂度是O（n）。</p><p><strong>26、如何实现数组和List之间的转换？</strong></p><ul><li>List转换成数组：调用ArrayList的toArray方法。</li><li>数组转换成List：调用Arrays的asList方法。</li></ul><p><strong>27、ArrayList和Vector的区别是什么？</strong></p><ul><li>Vector是同步的，而ArrayList是非同步的。</li><li>ArrayList比Vector快，它因为有同步，不会过载。 </li><li>ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。</li></ul><p><strong>28、Array和ArrayList有什么区别？</strong></p><ul><li>Array可以容纳毕本类型和对象，而ArrayList只能容纳对象。</li><li>Array是可以指定大小的，而ArrayList的大小是固定的</li><li>Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。</li></ul><p><strong>29、在Queue中poll（）和remove（）有什么区别？</strong></p><p>两者都是从队列中去元素，但poll（）在获取元素失败的时候会返回空，而remove（）获取元素失败时会抛出异常。</p><p><strong>30、哪些集合类是线程安全的？</strong></p><ul><li>vector：就比ArrayList多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用，在web应用中，特别是前台页面，效率最优先考虑。</li><li>stack：堆栈类，先进后出。</li><li>hashtable：比hashmap多了个线程安全。</li><li>enumeration：枚举类，相当于迭代器。</li></ul><p><strong>31、迭代器Iterator是什么？</strong></p><p>迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为轻量级对象，因为创建它的代价小。</p><p><strong>32、Iterator怎么使用？有什么特点？</strong></p><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><p>　　</p><p>(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。</p><p>　　</p><p>(2) 使用next()获得序列中的下一个元素。</p><p>　　</p><p>(3) 使用hasNext()检查序列中是否还有元素。</p><p>　　</p><p>(4) 使用remove()将迭代器新返回的元素删除。</p><p>　　</p><p>Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。</p><p><strong>33、Iterator和ListIterator有什么区别？</strong></p><ul><li>Iterator可以用来遍历Set和List集合，但是ListIterator只用用来遍历List。</li><li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。</li><li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</li></ul><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p><strong>35、并行和并发有什么区别？</strong></p><ul><li>并行是指两个或者多个时间在同一时刻发生；并发是指两个或多个事件在同一时间间隔发生。</li><li>并行是是在不同实体的多个事件，并发是同一实体上的多个事件。</li><li>在一台处理器上“同时”处理多个任务，在多台处理器上同时处理多个任务。如hadoop分布式集群。</li></ul><p>所以并发编程是目标是利用处理器的每一个核，以达到最高的处理性能。</p><p><strong>36、线程和进程的区别？</strong></p><p>简而言之，进程是程序运行和资源分配的基本单位，一个程序至少有一个进程，一个进程至少有一个线程。进程在执行过程中拥有独立的内存单元，而多个线程共享内存资源，减少切换次数，从而效率更高。线程是进程的一个实体，是cpu调度和分派的基本单位，是比程序更小的能独立运行的基本单位。同一进程中的多个线程之间可以并发执行。</p><p><strong>37、守护线程是什么？</strong></p><p>守护线程（即daemon thread），是个服务线程，准确的说就是服务其他的线程。</p><p><strong>38、创建线程有哪几种方式？</strong></p><p>一：通过继承Thread类创建线程类</p><ul><li>定义Thread类的子类，并重写该类的run方法，该run方法的方法体就代表了线程要完成的任务。因此把run()方法称为执行体。</li><li>创建Thread子类的实例，即创建了线程对象。</li><li>调用线程对象的start()方法来启动该线程。</li></ul><p>二：通过Runnable()接口创建线程类</p><ul><li>定义runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</li><li>创建 Runnable实现类的实例，并依此实例作为Thread的target来创建Thread对象，该Thread对象才是真正的线程对象。</li><li>调用线程对象的start()方法来启动线程。</li></ul><p>三：通过Callable和Future创建线程</p><ul><li>创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</li><li>创建Callable实现类的实例，使用FutureTask类来包装Callable对象，该FutureTask对象封装了该Callable对象的call()方法的返回值。</li><li>使用FutureTask对象作为Thread对象的target创建并启动新线程。</li><li>调用FutureTask对象的get()方法来获得子线程执行结束后的返回值。</li></ul><p><strong>39、说一下runnable和callable的区别？</strong></p><ul><li>Runnable接口中的run()方法的返回值是void，它做的事情只是纯粹的去执行run()方法中的代码。</li><li>Callable接口的call()方法是有返回值的，是一个泛型，和Future、FutureTask配合可以用来获取异步执行的结果。</li></ul><p><strong>40、线程有哪些状态？</strong></p><p>线程通常有五种状态：创建、就绪、运行、阻塞、死亡。</p><ol><li><p>创建状态：在生成线程对象，但没有调用该对象的start方法，这是线程的创建状态。</p><ol start="2"><li>就绪状态：当调用的线程对象的start方法之后，该线程就进入了就绪状态，但是此时线程调度程序还没有将该线程设置为当前线程，此时就处于就绪状态。在线程运行之后，从等待或者睡眠中回来之后，也会处于就绪状态。</li><li>运行状态：线程调度程序将就绪的线程设置为当前线程，那么此时线程就进入了运行状态，开始运行run函数中的代码。</li><li>阻塞状态：线程正在运行的时候，被暂停，通常是为了等待某个事件的发生（比如说某项资源就绪）之后继续运行。sleep，suspend，wait等方法都可以导致线程阻塞。</li><li>死亡状态：如果一个线程的run方法执行结束或者调用stop方法后，该线程就会死亡。对于已经死亡的线程，无法再使用start方法令其进入就绪。</li></ol></li></ol><p><strong>41、sleep() 和 wait() 有什么区别？</strong></p><ul><li>Sleep(): 方法是线程类（Thread）的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。因为sleep()是static静态的方法，他不能改变对象的机锁，当一个synchronized块中调用了sleep()方法，线程虽然进入了休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</li><li>wait：wait()是Object类的方法，当一个线程执行到wait方法时，它就进入到一个和该对象相关的等待池，同时释放对象的机锁，使得其它线程能够访问，可以通过notify，noytifyAll方法来唤醒等待的线程</li></ul><p><strong>42、notify()和notifyAll()有什么区别？</strong></p><ul><li>如果线程调用了对象的wait方法，那么线程会处于该线程的等待池中，等待池的线程不会去竞争该对象的锁。</li><li>当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。</li><li>优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。</li></ul><p><strong>43、线程的run()和start()有什么区别。</strong></p><ul><li><p>每个线程都是通过某个特定Thread对象所对应的方法run()来来完成其操作的，方法run()称为线程体。通过调用Thread类的start()方法来启动一个线程。</p></li><li><p>start()方法来启动一个线程，真正实现了多线程运行。此时无需等待run方法体代码执行完毕，可以继续执行下面的代码；此时线程是处于就绪状态的，并没有运行。然后通过此Thread类调用方法run()来完成其运行状态，这里run()称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程终止。然后CPU再调度其它线程。</p></li><li><p>run()方法是在本线程里的，只是线程里的一个函数，并不是多线程的。如果直接调用run()，其实就相当于是调用了一个蹼泳函数而已，直接用run()方法必须等待run()方法执行完毕才能执行下面的代码，所以执行路径还是只有一条，根本就没有现成的特征，所以在多线程执行时要使用start()方法而不是run()方法。</p></li></ul><p><strong>44、创建线程池有哪几种方式？</strong></p><ol><li><p>newFixedThreadPool(int nThreads) </p><p>创建一个固定长度的线程池，每当提交一个任务就创建一个线程，直到达到线程池的最大数量，这时线程规模将不再变化，当线程发生未预期的错误而结束时，线程池会补充一个新的线程。</p></li><li><p>newCachedThreadPool() </p><p>创建一个可缓存的线程池，如果线程池的规模超过了处理需求，将自动回收空闲线程，而当需求增加时，则可以自动添加新线程，线程池的规模不存在任何限制。</p></li><li><p>newSingleThreadExecutor()</p><p>这是一个单线程的Executor,它创建单个工作线程来执行任务，如果这个线程异常结束，会创建一个新的线程来代替它；它的特点是能确保任务在队列中的顺序来串行执行。</p></li><li><p>newScheduledThreadPool(int corePoolSize)</p><p>创建一个固定长度的线程池，而且以延迟或定时的方式来执行任务，类似于Timer</p></li></ol><p><strong>45、线程池有哪些状态？</strong></p><p>线程池有5种状态：Running、ShutDown、Stop、Tidying、Terminated。</p><p>线程池各个状态切换框架图：</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79gy1g5zjjhkfkmj30sp0ba0ts.jpg" alt="901565790296_.pic"></p><p>46、线程池中的submit()和execute()方法有什么区别？</p><ul><li>接收的参数不一样</li><li>submit有返回值，而execute没有</li><li>submit方便Exeception处理</li></ul><p>47、在Java程序中怎么保证多线程的运行安全？</p><p>线程安全在三个方面体现：</p><ul><li>原子性：提供互斥访问，同一时刻只能有一个线程对数据进行操作。</li><li>可见性：一个线程对主内存的修改可以及时地被其他线程看到。</li><li>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序。</li></ul><p><strong>48、多线程锁的升级原理是什么？</strong></p><p>在Java中，锁共有4种状态，级别从低到高依次为：无状态锁，偏向锁，轻量级锁和重量级锁状态，这几个状态随着竞争情况逐渐升级。锁可以升级但不能降级。</p><p>锁升级的图示过程：</p><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g5zjs3v3e4j30nq0d5wfy.jpg" alt="911565790802_.pic"></p><p><strong>49、什么是死锁？</strong></p><p>死锁是两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信的造成的一种阻塞线程，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态。</p><p><strong>50、怎样防止死锁？</strong></p><p>死锁产生的四个必要条件：</p><ol><li>互斥条件：</li><li>请求和保持条件</li><li>不可剥夺条件</li><li>环路等待条件</li></ol><p><strong>51、ThreadLocal是什么？有哪些使用场景？</strong></p><p>线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。Java提供ThreadLocal类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 web 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，Java 应用就存在内存泄露的风险。</p><p><strong>52、说一下synchronized底层实现原理？</strong></p><p>synchronized可以保证方法或者代码块在运行时，同一时刻只有一个方法可以进入到临界区，同时它还可以保证共享变量的内存可见性。</p><p>Java中每一个对象都可以作为锁，这是synchronized实现同步的基础：</p><ul><li>普通同步方法，锁是当前实例对象</li><li>静态同步方法，锁是当前类的class对象</li><li>同步方法块，锁是括号里面的对象</li></ul><p><strong>53、synchronized 和 volatile 的区别是什么？</strong></p><ul><li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li><li>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。</li><li>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性。</li><li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li><li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化。</li></ul><p><strong>54、synchronized 和 Lock 有什么区别？</strong></p><ul><li>首先synchronized是java内置关键字，在jvm层面，Lock是个java类；</li><li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</li><li>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在finally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li><li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li><li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）；</li><li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li></ul><p><strong>55. synchronized 和 ReentrantLock 区别是什么？</strong></p><p>synchronized是和if、else、for、while一样的关键字，ReentrantLock是类，这是二者的本质区别。既然ReentrantLock是类，那么它就提供了比synchronized更多更灵活的特性，可以被继承、可以有方法、可以有各种各样的类变量，ReentrantLock比synchronized的扩展性体现在几点上： </p><ul><li>ReentrantLock可以对获取锁的等待时间进行设置，这样就避免了死锁 </li><li>ReentrantLock可以获取各种锁的信息</li><li>ReentrantLock可以灵活地实现多路通知 </li></ul><p>另外，二者的锁机制其实也是不一样的:ReentrantLock底层调用的是Unsafe的park方法加锁，synchronized操作的应该是对象头中mark word。</p><p><strong>56. 说一下 atomic 的原理？</strong></p><p>Atomic包中的类基本的特性就是在多线程环境下，当有多个线程同时对单个（包括基本类型及引用类型）变量进行操作时，具有排他性，即当多个线程同时对该变量的值进行更新时，仅有一个线程能成功，而未成功的线程可以向自旋锁一样，继续尝试，一直等到执行成功。</p><p>Atomic系列的类中的核心方法都会调用unsafe类中的几个本地方法。我们需要先知道一个东西就是Unsafe类，全名为：sun.misc.Unsafe，这个类包含了大量的对C代码的操作，包括很多直接内存分配以及原子操作的调用，而它之所以标记为非安全的，是告诉你这个里面大量的方法调用都会存在安全隐患，需要小心使用，否则会导致严重的后果，例如在通过unsafe分配内存的时候，如果自己指定某些区域可能会导致一些类似C++一样的指针越界到其他进程的问题。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>57、什么是反射？</p><p>反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力</p><p>Java反射：</p><p>在Java运行时环境中，对于任意一个类，能否知道这个类有哪些属性和方法，对于任意一个对象，能否调用它的任意一个方法</p><p>58、什么是java序列化？什么情况下需要序列化？</p><p>简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。</p><p>什么情况下需要序列化：</p><p>a）当你想把的内存中的对象状态保存到一个文件中或者数据库中时候；<br>b）当你想用套接字在网络上传送对象的时候；<br>c）当你想通过RMI传输对象的时候；</p><p>59、动态代理是什么？有哪些应用？</p><p>动态代理：</p><p>当想要给实现了某个接口的类中的方法，加一些额外的处理。比如说加日志，加事务等。可以给这个类创建一个代理，故名思议就是创建一个新的类，这个类不仅包含原来类方法的功能，而且还在原来的基础上添加了额外处理的新类。这个代理类并不是定义好的，是动态生成的。具有解耦意义，灵活，扩展性强。</p><p>动态代理的应用：</p><ul><li>Spring的AOP</li><li>加事务</li><li>加权限</li><li>加日志</li></ul><p>60、怎样实现动态代理？</p><p>首先必须定义一个接口，还要有一个InvocationHandler(将实现接口的类的对象传递给它)处理类。再有一个工具类Proxy(习惯性将其称为代理类，因为调用他的newInstance()可以产生代理对象,其实他只是一个产生代理对象的工具类）。利用到InvocationHandler，拼接代理类源码，将其编译生成代理类的二进制码，利用加载器加载，并将其实例化产生代理对象，最后返回。</p><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><p>61、为什么要使用克隆？</p><p>想对一个对象进行处理，又想保留原有数据进行接下来的操作，就需要克隆，Java语言中克隆针对的是类的实例。</p><p>62、如何实现对象克隆？</p><p>有两种方法：</p><p>1). 实现Cloneable接口并重写Object类中的clone()方法；</p><p>  </p><p>2). 实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下：</p><p><strong>63. 深拷贝和浅拷贝区别是什么？</strong></p><ul><li>浅拷贝只是复制了对象的引用地址，两个对象指向同一个内存地址，所以修改其中任意的值，另一个值都会随之变化，这就是浅拷贝（例：assign()）</li><li>深拷贝是将对象及值复制过来，两个对象修改其中任意的值另一个值不会改变，这就是深拷贝（例：JSON.parse()和JSON.stringify()，但是此方法无法复制函数类型）</li></ul><h2 id="Java-Web"><a href="#Java-Web" class="headerlink" title="Java Web"></a>Java Web</h2><p>64、JSP和Servlet有什么区别？</p><ol><li>jsp经过编译变成servlet</li><li>jsp更擅长于页面控制，servlet更擅长与逻辑控制</li><li>servlet中没有内置对象，jsp的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。</li><li>Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。</li></ol><p><strong>65、JSP有哪些内置对象？作用分别是什么？</strong></p><p>JSP有9个内置对象：</p><ul><li>request：封装客户端的请求，其中包含来自GET或POST请求的参数；</li><li>response：封装服务器对客户端的响应；</li><li>pageContext：通过该对象可以获取其他对象；</li><li>session：封装用户会话的对象；</li><li>application：封装服务器运行环境的对象；</li><li>out：输出服务器响应的输出流对象；</li><li>config：Web应用的配置对象；</li><li>page：JSP页面本身（相当于Java程序中的this）；</li><li>exception：封装页面抛出异常的对象。</li></ul><p><strong>66、说一下jsp的4种作用域？</strong></p><p>JSP的四种作用域包括page、request、session、aaplication：</p><ul><li>page代表与一个页面相关的对象和属性。</li><li>request代表与Web客户机发出的一个请求相关的对象和属性。</li><li>session代表某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。</li><li>application代表与整个Web应用程序相关的对象和属性，它实质上市跨越整个Web应用程序，包括多个页面，请求和会话的一个全局作用域。</li></ul><p>67、Session和Cookie有什么区别？</p><ul><li>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。</li><li>思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。</li><li>Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</li></ul><p>68、说一下Session的工作原理？</p><p>其实session是一个存在服务器上的类似于一个散列表格的文件。里面存有我们需要的信息，在我们需要用的时候可以从里面取出来。类似于一个大号的map吧，里面的键存储的是用户的sessionid，用户向服务器发送请求的时候会带上这个sessionid。这时就可以从中取出对应的值了。</p><p>69、如果客户端禁止cookie能实现session还能用吗？</p><p>Cookie与 Session，一般认为是两个独立的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。但为什么禁用Cookie就不能得到Session呢？因为Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。</p><p>假定用户关闭Cookie的情况下使用Session，其实现途径有以下几种：</p><ol><li>设置php.ini配置文件中的“session.use_trans_sid = 1”，或者编译时打开打开了“–enable-trans-sid”选项，让PHP自动跨页传递Session ID。</li><li>手动通过URL传值、隐藏表单传递Session ID。</li><li>用文件、数据库等形式保存Session ID，在跨页过程中手动调用。</li></ol><p>70、SpringMVC和Struts的区别是什么？</p><ul><li>拦截机制不同</li></ul><p>Struts2是类级别的拦截，每次请求就会创建一个Action，和Spring整合时Struts2的ActionBean注入作用域是原型模式prototype，然后通过setter，getter吧request数据注入到属性。Struts2中，一个Action对应一个request，response上下文，在接收参数时，可以通过属性接收，这说明属性参数是让多个方法共享的。Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了，只能设计为多例。</p><p>　　</p><p>SpringMVC是方法级别的拦截，一个方法对应一个Request上下文，所以方法直接基本上是独立的，独享request，response数据。而每个方法同时又何一个url对应，参数的传递是直接注入到方法中的，是方法所独有的。处理结果通过ModeMap返回给框架。在Spring整合时，SpringMVC的Controller Bean默认单例模式Singleton，所以默认对所有的请求，只会创建一个Controller，有应为没有共享的属性，所以是线程安全的，如果要改变默认的作用域，需要添加@Scope注解修改。</p><p>　　</p><p>Struts2有自己的拦截Interceptor机制，SpringMVC这是用的是独立的Aop方式，这样导致Struts2的配置文件量还是比SpringMVC大。</p><ul><li>底层框架不同</li></ul><p>Struts2采用Filter（StrutsPrepareAndExecuteFilter）实现，SpringMVC（DispatcherServlet）则采用Servlet实现。Filter在容器启动之后即初始化；服务停止以后坠毁，晚于Servlet。Servlet在是在调用时初始化，先于Filter调用，服务停止后销毁。</p><ul><li>性能方面</li></ul><p>Struts2是类级别的拦截，每次请求对应实例一个新的Action，需要加载所有的属性值注入，SpringMVC实现了零配置，由于SpringMVC基于方法的拦截，有加载一次单例模式bean注入。所以，SpringMVC开发效率和性能高于Struts2。</p><ul><li>配置方面</li></ul><p>spring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高。</p><p>71、如何避免sql注入？</p><ol><li>PrepareStatement</li><li>使用正则表达式过滤传入的参数</li><li>字符串过滤</li><li>JSP中调用该函数检查是否包含非法字符</li><li>JSP页面判断代码</li></ol><p>72、什么是XSS</p><p>XSS攻击又称CSS,全称Cross Site Script  （跨站脚本攻击），其原理是攻击者向有XSS漏洞的网站中输入恶意的 HTML 代码，当用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。XSS 攻击类似于 SQL 注入攻击，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。 XSS是 Web 程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式。</p><p>XSS防范的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。</p><p>73、什么是CSRF攻击，如何避免？</p><p>CSRF（Cross-site request forgery）也被称为 one-click attack或者 session riding，中文全称是叫<strong>跨站请求伪造</strong>。一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。常用于盗取账号、转账、发送虚假消息等。攻击者利用网站对请求的验证漏洞而实现这样的攻击行为，网站能够确认请求来源于用户的浏览器，却不能验证请求是否源于用户的真实意愿下的操作行为。</p><h2 id="如何避免："><a href="#如何避免：" class="headerlink" title="如何避免："></a>如何避免：</h2><h3 id="1-验证-HTTP-Referer-字段"><a href="#1-验证-HTTP-Referer-字段" class="headerlink" title="1. 验证 HTTP Referer 字段"></a>1. 验证 HTTP Referer 字段</h3><blockquote><p>HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF<br>攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2-使用验证码"><a href="#2-使用验证码" class="headerlink" title="2. 使用验证码"></a>2. 使用验证码</h3><blockquote><p>关键操作页面加上验证码，后台收到请求后通过判断验证码可以防御CSRF。但这种方法对用户不太友好。</p></blockquote><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="3-在请求地址中添加token并验证"><a href="#3-在请求地址中添加token并验证" class="headerlink" title="3. 在请求地址中添加token并验证"></a>3. 在请求地址中添加token并验证</h3><blockquote><p>CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。<br>对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 <a href="http://url/?csrftoken=tokenvalue%E3%80%82">http://url?csrftoken=tokenvalue。</a><br>而对于 POST 请求来说，要在 form 的最后加上 <input type="hidden" name="csrftoken" value="tokenvalue">，这样就把token以参数的形式加入请求了。</p></blockquote><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="4-在HTTP-头中自定义属性并验证"><a href="#4-在HTTP-头中自定义属性并验证" class="headerlink" title="4. 在HTTP 头中自定义属性并验证"></a>4. 在HTTP 头中自定义属性并验证</h3><blockquote><p>这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。</p></blockquote><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p><strong>74、throw和throws的区别？</strong></p><p>throws是用来声明一个方法可能抛出的所有异常信息，throws是将异常声明但是不处理，而是将异常往上传，谁调用我就交给谁处理。而throw则是指抛出的一个具体的异常类型。</p><p><strong>75、final、finally、finalize有什么区别？</strong></p><ul><li><ol><li>final修饰类，表示该类不能被继承</li><li>final修饰方法，表示该方法不可被重写</li><li>final修饰变量，表示该变量是常量，不能被重新赋值</li></ol></li><li>finally用于try-catch代码块中，不管是否出现异常，finally代码块中的代码都会执行，一般用来存放关闭资源的代码</li><li>finalize是一个方法，属于Object类的一个方法，而Object类是所有方法的弗雷，该方法一般由垃圾回收器来调用，当我们调用System的gc()方法的时候，由垃圾回收器调用finalize(),回收垃圾。 </li></ul><p>76、try-catch-finally中哪个部分可以省略？</p><p>答：catch可以省略</p><p><strong>原因：</strong></p><p>更为严格的说法其实是：try只适合处理运行时异常，try+catch适合处理运行时异常+普通异常。也就是说，如果你只用try去处理普通异常却不加以catch处理，编译是通不过的，因为编译器硬性规定，普通异常如果选择捕获，则必须用catch显示声明以便进一步处理。而运行时异常在编译时没有如此规定，所以catch可以省略，你加上catch编译器也觉得无可厚非。</p><p>理论上，编译器看任何代码都不顺眼，都觉得可能有潜在的问题，所以你即使对所有代码加上try，代码在运行期时也只不过是在正常运行的基础上加一层皮。但是你一旦对一段代码加上try，就等于显示地承诺编译器，对这段代码可能抛出的异常进行捕获而非向上抛出处理。如果是普通异常，编译器要求必须用catch捕获以便进一步处理；如果运行时异常，捕获然后丢弃并且+finally扫尾处理，或者加上catch捕获以便进一步处理。</p><p>至于加上finally，则是在不管有没捕获异常，都要进行的“扫尾”处理。</p><p>77、try-catch-finally中，如果catch中return了，finally还会执行吗？</p><p>会执行，finalliy会在return前执行。</p><p>78、常见的异常类有哪些？</p><ul><li>NullPointerException：当应用程序试图访问空对象时，则抛出该异常。</li><li>SQLException：提供关于数据库访问错误或其他错误信息的异常。</li><li>IndexOutOfBoundsException：指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出。 </li><li>NumberFormatException：当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li><li>FileNotFoundException：当试图打开指定路径名表示的文件失败时，抛出此异常。</li><li>IOException：当发生某种I/O异常时，抛出此异常。此类是失败或中断的I/O操作生成的异常的通用类。</li><li>ClassCastException：当试图将对象强制转换为不是实例的子类时，抛出该异常。</li><li>ArrayStoreException：试图将错误类型的对象存储到一个对象数组时抛出的异常。</li><li>IllegalArgumentException：抛出的异常表明向方法传递了一个不合法或不正确的参数。</li><li>ArithmeticException：当出现异常的运算条件时，抛出此异常。例如，一个整数“除以零”时，抛出此类的一个实例。 </li><li>NegativeArraySizeException：如果应用程序试图创建大小为负的数组，则抛出该异常。</li><li>NoSuchMethodException：无法找到某一特定方法时，抛出该异常。</li><li>SecurityException：由安全管理器抛出的异常，指示存在安全侵犯。</li><li>UnsupportedOperationException：当不支持请求的操作时，抛出该异常。</li><li>RuntimeExceptionRuntimeException：是那些可能在Java虚拟机正常运行期间抛出的异常的超类。</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>79、http响应吗301和302代表的是什么？有什么区别？</p><p>答：301，302都是TTTP状态的编码，都代表某个URL发生了转移。</p><p>区别：</p><ul><li>301 redirect: 301 代表永久性转移(Permanently Moved)。</li><li>302 redirect: 302 代表暂时性转移(Temporarily Moved )。</li></ul><p>80、forward和redirect的区别？</p><p>Forward和Redirect代表了两种请求转发方式：直接转发和间接转发。</p><ul><li><p><strong>直接转发方式（Forward）</strong>，客户端和浏览器只发出一次请求，Servlet、HTML、JSP或其它信息资源，由第二个信息资源响应该请求，在请求对象request中，保存的对象对于每个信息资源是共享的。</p></li><li><p><strong>间接转发方式（Redirect）</strong>实际是两次HTTP请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个URL发出请求，从而达到转发的目的。</p></li></ul><p>81、简述TCP和UDP的区别？</p><ul><li>TCP面向连接（如打电话要先拨号建立连接）；UDP是无连接的，即发送数据之前不需要建立连接。</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付。</li><li>Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</li><li>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信。</li><li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li></ul><p>82、TCP为什么要三次握手？两次不行吗？为什么？</p><p>TCP需要三次握手才可以确定通信双方都可接收到信息。</p><p>为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。</p><p>如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。</p><p>83、说一下TCP粘包是怎么产生的？</p><p>84、OSI的七层模型都有哪些？</p><ol><li>应用层：网络服务与最终用户的一个接口</li><li>表示层：数据的表示、安全、压缩</li><li>会话层：建立、管理、终止会话</li><li>传输层：定义传输数据的协议端口号，以及流控和差错校验</li><li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择</li><li>数据链路层：建立逻辑连接，进行硬件地址寻址、差错校验等功能</li><li>物理层：建立、维护、断开物理连接</li></ol><p>85、get和post请求有哪些区别?</p><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST么有。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中。</li></ul><p><strong>86、如何实现跨域？</strong></p><p><strong>方式一：图片ping或script标签跨域</strong></p><p><strong>方式二：JSONP跨域</strong></p><p><strong>方式三：CORS</strong></p><p><strong>方式四：window.name+iframe</strong></p><p><strong>方式五：window.postMessage()</strong></p><p><strong>方式六：修改document.domain跨子域</strong></p><p><strong>方式七：WebSocket</strong></p><p><strong>方式八：代理</strong></p><p>87、说一下JSONP实现原理？</p><p>jsonp 即 json+padding，动态创建script标签，利用script标签的src属性可以获取任何域下的js脚本，通过这个特性(也可以说漏洞)，服务器端不在返货json格式，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。</p><h2 id="九、设计模式"><a href="#九、设计模式" class="headerlink" title="九、设计模式"></a>九、设计模式</h2><p>88、说一下你熟悉的设计模式？</p><p>参考：<a href="http://mp.weixin.qq.com/s?__biz=MzIwMTY0NDU3Nw==&amp;mid=2651938221&amp;idx=1&amp;sn=9cb29d1eb0fdbdb5f976306b08d5bdcc&amp;chksm=8d0f32e3ba78bbf547c6039038682706a2eaf83002158c58060d5eb57bdd83eb966a1e223ef6&amp;scene=21#wechat_redirect">常用的设计模式汇总，超详细！</a></p><p>89、简单工厂和抽象工厂有什么区别？</p><h2 id="十、Spirng、Spring-MVC"><a href="#十、Spirng、Spring-MVC" class="headerlink" title="十、Spirng、Spring MVC"></a>十、Spirng、Spring MVC</h2><p>90、为什么要使用spring？</p><ol><li>简介：<ul><li>目的：解决企业应用开发的复杂性</li><li>功能：使用基本的JavaBean代替EJB，并提供更多的企业应用功能</li><li>范围：任何Java应用</li></ul></li></ol><p>简单来说，Spring是一个轻量级的控制反转（IOC）和面向切面（AOP）的容器框架。</p><ol start="2"><li>轻量：</li></ol><p>从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。</p><ol start="3"><li>控制反转</li></ol><p>Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。</p><p>4、面向切面</p><p>Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。</p><p>5、容器</p><p>Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的bean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。</p><p>6、框架</p><p>Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。</p><p>所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。</p><p>91、解释一下什么是AOP？</p><p>AOP（Aspect-Oriented Programming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。</p><p>使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p><p>92、解释一下什么是IOC？</p><p>IOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”。</p><p>　　</p><p>1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC 这个概念。对于面向对象设计及编程的基本思想，前面我们已经讲了很多了，不再赘述，简单来说就是把复杂系统分解成相互合作的对象，这些对象类通过封装以后，内部实现对外部是透明的，从而降低了解决问题的复杂度，而且可以灵活地被重用和扩展。</p><p>　　</p><p>IOC理论提出的观点大体是这样的：借助于“第三方”实现具有依赖关系的对象之间的解耦。如下图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIO6jib8XP3r8h8sib080icibHvumUWHk7VVBq5O5WgWj1QFQBPWljlj5CibsUx6fp4b7LQhvNJmGN6v73A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>图 IOC解耦过程</p><p>　　</p><p>大家看到了吧，由于引进了中间位置的“第三方”，也就是IOC容器，使得A、B、C、D这4个对象没有了耦合关系，齿轮之间的传动全部依靠“第三方”了，全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用，如果没有这个“粘合剂”，对象与对象之间会彼此失去联系，这就是有人把IOC容器比喻成“粘合剂”的由来。</p><p>　　</p><p>我们再来做个试验：把上图中间的IOC容器拿掉，然后再来看看这套系统：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIO6jib8XP3r8h8sib080icibHvuPjyIicvo5d6nIschjEmic6hyRyr2I9IcvMGR01uP8DBBhE4zVZU4frMQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>图 拿掉IOC容器后的系统</p><p>　　</p><p>我们现在看到的画面，就是我们要实现整个系统所需要完成的全部内容。这时候，A、B、C、D这4个对象之间已经没有了耦合关系，彼此毫无联系，这样的话，当你在实现A的时候，根本无须再去考虑B、C和D了，对象之间的依赖关系已经降低到了最低程度。所以，如果真能实现IOC容器，对于系统开发而言，这将是一件多么美好的事情，参与开发的每一成员只要实现自己的类就可以了，跟别人没有任何关系！</p><p>​    </p><p>我们再来看看，控制反转(IOC)到底为什么要起这么个名字？我们来对比一下：</p><p>​    </p><p>软件系统在没有引入IOC容器之前，如图1所示，对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。</p><p>​    </p><p>软件系统在引入IOC容器之后，这种情形就完全改变了，如图3所示，由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。</p><p>​    </p><p>通过前后的对比，我们不难看出来：对象A获得依赖对象B的过程,由主动行为变为了被动行为，控制权颠倒过来了，这就是“控制反转”这个名称的由来。</p><p>93、Spring有哪些主要模块？</p><p>Spring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。</p><p>![image-20190822135310918](/Users/xiekc/Library/Application Support/typora-user-images/image-20190822135310918.png)</p><p>94、Spring常用的注入方式有哪些？</p><p>Spring通过DI（依赖注入）实现IOC（控制反转），常用的注入方式主要有三种：</p><ol><li>构造方法注入</li><li>setter注入</li><li>基于注解的注入</li></ol><p>95、Spring的bean是线程安全的吗？</p><p>Spring容器中的Bean是否线程安全，容器本身并没有提供Bean的线程安全策略，因此可以说Spring容器的Bean本来不具备线程安全的特性，但是具体要结合具体scope的Bean去研究。</p><p>96、Spring支持几种bean的作用域？</p><p>当通过spring容器创建一个Bean实例时，不仅可以完成Bean实例的实例化，还可以为Bean指定特定的作用域。Spring支持如下5种作用域：</p><ul><li>singleton：单例模式，在整个Spring IoC容器中，使用singleton定义的Bean将只有一个实例</li><li>prototype：原型模式，每次通过容器的getBean方法获取prototype定义的Bean时，都将产生一个新的Bean实例</li><li>request：对于每次HTTP请求，使用request定义的Bean都将产生一个新实例，即每次HTTP请求将会产生不同的Bean实例。只有在Web应用中使用Spring时，该作用域才有效</li><li>session：对于每次HTTP Session，使用session定义的Bean豆浆产生一个新实例。同样只有在Web应用中使用Spring时，该作用域才有效</li><li>globalsession：每个全局的HTTP Session，使用session定义的Bean都将产生一个新实例。典型情况下，仅在使用portlet context的时候有效。同样只有在Web应用中使用Spring时，该作用域才有效</li></ul><p>其中比较常用的是singleton和prototype两种作用域。对于singleton作用域的Bean，每次请求该Bean都将获得相同的实例。容器负责跟踪Bean实例的状态，负责维护Bean实例的生命周期行为；如果一个Bean被设置成prototype作用域，程序每次请求该id的Bean，Spring都会新建一个Bean实例，然后返回给程序。在这种情况下，Spring容器仅仅使用new 关键字创建Bean实例，一旦创建成功，容器不在跟踪实例，也不会维护Bean实例的状态。</p><p>如果不指定Bean的作用域，Spring默认使用singleton作用域。Java在创建Java实例时，需要进行内存申请；销毁实例时，需要完成垃圾回收，这些工作都会导致系统开销的增加。因此，prototype作用域Bean的创建、销毁代价比较大。而singleton作用域的Bean实例一旦创建成功，可以重复使用。因此，除非必要，否则尽量避免将Bean被设置成prototype作用域。</p><p>97、</p><p>Spring容器负责创建应用程序中的bean同时通过ID来协调这些对象之间的关系。作为开发人员，我们需要告诉Spring要创建哪些bean并且如何将其装配到一起。</p><p>spring中bean装配有两种方式：</p><ul><li>隐式的bean发现机制和自动装配</li><li>在java代码或者XML中进行显示配置</li></ul><p>当然这些方式也可以配合使用。</p><p>98、Spring事务实现方式有哪些？</p><ul><li><p>编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。</p></li><li><p>基于 TransactionProxyFactoryBean 的声明式事务管理</p></li><li><p>基于 @Transactional 的声明式事务管理</p></li><li><p>基于 Aspectj AOP 配置事务</p></li></ul><p>99、说一下spring的事务隔离？</p><ul><li>脏读：一个事务读到另一个事务未提交的更新数据。</li><li>幻读：例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还存在没有修改的数据行，就好象发生了幻觉一样。</li><li>不可重复读：比方说在同一个事务中先后执行两条一模一样的select语句，期间在此次事务中没有执行过任何DDL语句，但先后得到的结果不一致，这就是不可重复读。</li></ul><p>100、说一下spring mvc运行流程？</p><p>Spring MVC运行流程图：</p><p><img src="http://ww1.sinaimg.cn/large/006y8mN6gy1g68tueaesxj30oe0ekn5g.jpg" alt="image-20190822223136943"></p><ol><li><p>用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获。</p></li><li><p>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；</p></li><li><p>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</p></li><li><p>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><ul><li>HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息</li><li>数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</li><li>数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</li><li>数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</li></ul></li><li><p>Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p></li><li><p>根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet </p></li><li><p>ViewResolver 结合Model和View，来渲染视图；</p></li><li><p>将渲染结果返回给客户端。</p></li></ol><p>101、Spring MVC有哪些组件？</p><p>Spring MVC的核心组件：</p><ol><li>DispatcherServlet：中央控制器，把请求给转发到具体的控制类</li><li>Controller：具体处理请求的控制器</li><li>HandlerMapping：映射处理器，负责映射中央处理器转发给controller时的映射策略</li><li>ModelAndView：服务层返回的数据和视图层的封装类</li><li>ViewResolver：视图解析器，解析具体的视图</li><li>Interceptors ：拦截器，负责拦截我们定义的请求然后做处理工作</li></ol><p><strong>102、@RequestMapping的作用是什么？</strong></p><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><h3 id="value，-method："><a href="#value，-method：" class="headerlink" title="value， method："></a><strong>value， method：</strong></h3><ul><li>value：指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）</li><li>method：指定请求的method类型， GET、POST、PUT、DELETE等</li></ul><h3 id="consumes，produces"><a href="#consumes，produces" class="headerlink" title="consumes，produces"></a><strong>consumes，produces</strong></h3><ul><li>consumes：指定处理请求的提交内容类型（Content-Type），例如application/json, text/html；</li><li>produces：指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</li></ul><h3 id="params，headers"><a href="#params，headers" class="headerlink" title="params，headers"></a><strong>params，headers</strong></h3><ul><li>params： 指定request中必须包含某些参数值是，才让该方法处理。</li><li>headers：指定request中必须包含某些指定的header值，才能让该方法处理请求。</li></ul><p>103、Autowired的作用是什么？</p><h2 id="十一、SpringBoot、SpringCloud"><a href="#十一、SpringBoot、SpringCloud" class="headerlink" title="十一、SpringBoot、SpringCloud"></a>十一、SpringBoot、SpringCloud</h2><p><strong>104、什么是springboot？</strong></p><p>在Spring框架这个大家族中，产生了很多衍生框架，比如 Spring、SpringMvc框架等，Spring的核心内容在于控制反转(IOC)和依赖注入(DI),所谓控制反转并非是一种技术，而是一种思想，在操作方面是指在spring配置文件中创建<bean>，依赖注入即为由spring容器为应用程序的某个对象提供资源，比如 引用对象、常量数据等。</bean></p><p>SpringBoot是一个框架，一种全新的编程规范，他的产生简化了框架的使用，所谓简化是指简化了Spring众多框架中所需的大量且繁琐的配置文件，所以 SpringBoot是一个服务于框架的框架，服务范围是简化配置文件。</p><p><strong>105、为什么要使用SpringBoot</strong></p><ul><li>Spring Boot使编码变简单</li><li>Spring Boot使配置变简单</li><li>Spring Boot使部署变简单</li><li>Spring Boot使监控变简单</li><li>Spring的不足</li></ul><p>106、springboot的核心配置文件是什么？</p><p>SpringBoot提供两种常用的配置文件：</p><ul><li>properties文件</li><li>yml文件</li></ul><p>107、springboot配置文件有哪几种类型？它们有什么区别？</p><p>SpringBoot提供了两种常用的配置文件，分别是properties文件和yml文件，相对于properties文件而言，yml文件更年轻，也有很多的坑，yml通过空格来确定层级关系，使配置文件结构很清晰。</p><p>108、SpringBoot有哪种方式可以实现热部署？</p><p>SpringBoot热部署实现方式有两种：</p><ol><li><p>使用spring loaded</p></li><li><p>使用spring-boot-devtools</p></li></ol><p>109、JPA和Hibernate有什么区别？</p><ul><li>JPA Java Persistence API，是Java EE 5的标准ORM接口，也是ejb3规范的一部分。</li><li>Hibernate，当今很流行的ORM框架，是JPA的一个实现，但是其功能是JPA的超集。</li><li>JPA和Hibernate之间的关系，可以简单的理解为JPA是标准接口，Hibernate是实现。那么Hibernate是如何实现与JPA的这种关系的呢。Hibernate主要是通过三个组件来实现的，及hibernate-annotation、hibernate-entitymanager和hibernate-core。</li><li>hibernate-annotation是Hibernate支持annotation方式配置的基础，它包括了标准的JPA annotation以及Hibernate自身特殊功能的annotation。</li><li>hibernate-core是Hibernate的核心实现，提供了Hibernate所有的核心功能。</li><li>hibernate-entitymanager实现了标准的JPA，可以把它看成hibernate-core和JPA之间的适配器，它并不直接提供ORM的功能，而是对hibernate-core进行封装，使得Hibernate符合JPA的规范。</li></ul><p>110、什么是spring cloud？</p><p>从字面理解，Spring Cloud就是致力于分布式系统、云服务器的框架。</p><p>Spring Cloud 是整个Spring家族中新的成员，是最近云服务火爆的必然产物。</p><p>Spring Cloud 为开发人员提供分布式系统中的一些常见模式的工具：</p><ul><li>配置管理</li><li>服务注册与发现</li><li>断路器</li><li>智能路由</li><li>服务间调用</li><li>负载均衡</li><li>微代理</li><li>控制总线</li><li>一次性令牌</li><li>全局锁</li><li>领导选举</li><li>分布式会话</li><li>集群状态</li><li>分布式消息</li><li>……</li></ul><p>111、Spring Cloud断路器的作用是什么？</p><p>在Spring Cloud中使用了Hystrix 来实现断路器的功能，断路器可以防止一个应用程序多次试图执行一个操作，即很可能失败，允许它继续而不等待故障恢复或者浪费 CPU 周期，而它确定该故障是持久的。断路器模式也使应用程序能够检测故障是否已经解决，如果问题似乎已经得到纠正，应用程序可以尝试调用操作。</p><p>断路器增加了稳定性和灵活性，以一个系统，提供稳定性，而系统从故障中恢复，并尽量减少此故障的对性能的影响。它可以帮助快速地拒绝对一个操作，即很可能失败，而不是等待操作超时（或者不返回）的请求，以保持系统的响应时间。如果断路器提高每次改变状态的时间的事件，该信息可以被用来监测由断路器保护系统的部件的健康状况，或以提醒管理员当断路器跳闸，以在打开状态。</p><p>112、Spring Cloud 的核心组件有哪些？</p><ol><li><p>服务器发现—Netflix Eureka</p></li><li><p>客服端负载均衡—Netflix Ribbon</p></li><li><p>断路器：Netflix Hystrix</p></li><li><p>服务网关：Netflix Zuul</p></li><li><p>分布式配置：Spring Cloud Config</p></li></ol><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><p>125、mybatis中#{} 和${}的区别是什么？</p><ul><li>#{}是预编译处理，${}是字符串替换；</li><li>Mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；</li><li>Mybatis在处理${}时，就是把${}替换成变量的值；</li><li>使用#{}可以有效的防止SQL注入，提高系统安全性。</li></ul><p>126、mybtais有几种分页方式？</p><ol><li>数组分页</li><li>sql分页</li><li>拦截器分页</li><li>RowBounds分页</li></ol><p>127、mybatis逻辑分页和物理分页的区别是什么？</p><ul><li>物理分页速度上并不一定快于逻辑分页，逻辑分页速度上也并不一定快于物理分页。</li><li>物理分页总是优于逻辑分页：没有必要将属于数据库端的压力加诸到应用端来，就算速度上存在优势,然而其它性能上的优点足以弥补这个缺点。</li></ul><p>128、mybatis是否支持延迟加载？延迟加载的原理是什么？</p><p>Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false。</p><p>它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的对象b属性就有值了，接着完成a.getB().getName()方法的调用。这就是延迟加载的基本原理。</p><p>当然了，不光是Mybatis，几乎所有的包括Hibernate，支持延迟加载的原理都是一样的。</p><p>130、说一下mybatis的一级缓存和二级缓存？</p><p>一级缓存: 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为 Session，当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认打开一级缓存。</p><p>二级缓存与一级缓存其机制相同，默认也是采用 PerpetualCache，HashMap 存储，不同在于其存储作用域为 Mapper(Namespace)，并且可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现Serializable序列化接口(可用来保存对象的状态),可在它的映射文件中配置<cache> ；</cache></p><p>对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p><p>131、mybatis和hibernate的区别有哪些？</p><p>（1）Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。</p><p>（2）Mybatis直接编写原生态sql，可以严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，因为这类软件需求变化频繁，一但需求变化要求迅速输出成果。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件，则需要自定义多套sql映射文件，工作量大。 </p><p>（3）Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件，如果用hibernate开发可以节省很多代码，提高效率。 </p><p>132、mybatis有哪些执行器（Executor）？</p><p>Mybatis有三种基本的执行器（Executor）：</p><ol><li>每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。</li><li><strong>ReuseExecutor</strong>：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。</li><li><strong>BatchExecutor</strong>：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。</li></ol><p>133、Mybatis分页插件的实现原理的是什么？</p><p>分页插件的基本原理是使用Mybatis提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页参数。</p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>135、RabbitMQ的使用场景有哪些？</p><h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><p>164、数据库的三范式是什么？</p><ul><li>第一范式：强调的是强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。</li><li>第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。</li><li>第三范式：任何非主属性不依赖于其它非主属性。</li></ul><p>165、<strong>一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 mysql 数据库，又插入了一条数据，此时 id 是几？</strong></p><ul><li>表类型如果是 MyISAM ，那 id 就是 18。</li><li>表类型如果是 InnoDB，那 id 就是 15。</li></ul><p>InnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。</p><p>166、如何获取当前数据库版本？</p><p>使用 select version() 获取当前 MySQL 数据库版本。</p><p>167、说一下ACID是什么？</p><ul><li>Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。</li><li>Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。</li><li>Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li>Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><p>168、char和varchar的区别是什么？</p><p>char(n) ：固定长度类型，比如订阅 char(10)，当你输入”abc”三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。</p><p>char 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。</p><p>varchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。</p><p>所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。</p><p>169、float和double的区别是什么？</p><ul><li>float 最多可以存储 8 位的十进制数，并在内存中占 4 字节。</li><li>double 最可可以存储 16 位的十进制数，并在内存中占 8 字节。</li></ul><p>170、mysql的内连接、左连接、右连接有什么区别？</p><p>内连接关键字：inner join；左连接：left join； 右连接right join。</p><p>内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。</p><p>171、mysql索引是怎么实现的？</p><p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p><p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p><p>172、怎样验证mysql的索引是否满足需求？</p><p>使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。</p><p>explain 语法：explain select * from table where type=1。</p><p>173、说一下数据库的事务隔离？</p><p>MySQL 的事务隔离是在 MySQL. ini 配置文件里添加的，在文件的最后添加：transaction-isolation = REPEATABLE-READ</p><p>可用的配置值：READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE。</p><ul><li>READ-UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。</li><li>READ-COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。</li><li>REPEATABLE-READ：可重复读，默认级别，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读）。</li><li>SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。</li></ul><p>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。</p><p>不可重复读 ：是指在一个事务内，多次读同一数据。</p><p>幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。</p><p>174、说一下mysql常用的引擎？</p><p>InnoDB 引擎：InnoDB 引擎提供了对数据库 acid 事务的支持，并且还提供了行级锁和外键的约束，它的设计的目标就是处理大数据容量的数据库系统。MySQL 运行的时候，InnoDB 会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎是不支持全文搜索，同时启动也比较的慢，它是不会保存表的行数的，所以当进行 select count(*) from table 指令的时候，需要进行扫描全表。由于锁的粒度小，写操作是不会锁定全表的,所以在并发度较高的场景下使用会提升效率的。</p><p>MyIASM 引擎：MySQL 的默认引擎，但不提供事务的支持，也不支持行级锁和外键。因此当执行插入和更新语句时，即执行写操作的时候需要锁定这个表，所以会导致效率会降低。不过和 InnoDB 不同的是，MyIASM 引擎是保存了表的行数，于是当进行 select count(*) from table 语句时，可以直接的读取已经保存的值而不需要进行扫描全表。所以，如果表的读操作远远多于写操作时，并且不需要事务的支持的，可以将 MyIASM 作为数据库引擎的首选。</p><p>175、说一下mysql的行锁和标所？</p><ul><li>表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。</li><li>行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</li></ul><p>176、说一下乐观锁和悲观锁？</p><ul><li>乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。</li><li>悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。</li></ul><p>数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。</p><p>177、mysql问题排查都有哪些手段？</p><ul><li>使用show processlist命令查看当前所有连接信息。</li><li>使用 explain 命令查询 SQL 语句执行计划。</li><li>开启慢查询日志，查看慢查询的 SQL。</li></ul><p>178、如何做mysql的性能优化？</p><ul><li>为搜索字段创建索引。</li><li>避免使用 select *，列出需要查询的字段。</li><li>垂直分割分表。</li><li>选择正确的存储引擎。</li></ul><h2 id="十八、Redis"><a href="#十八、Redis" class="headerlink" title="十八、Redis"></a>十八、Redis</h2><p>179、Redis是什么？都有哪些使用场景？</p><p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p>Redis 使用场景：</p><ul><li>数据高并发的读写</li><li>海量数据的读写</li><li>对扩展性要求高的数据</li></ul><p>180、redis有哪些功能？</p><ul><li>数据缓存功能</li><li>分布式锁的功能</li><li>支持数据持久化</li><li>支持事务</li><li>支持消息队列</li></ul><p>181、<strong>redis 和 memecache 有什么区别？</strong></p><ul><li>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</li><li>redis的速度比memcached快很多</li><li>redis可以持久化其数据</li></ul><p>182、redis为什么是单线程的？</p><p>因为 cpu 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存或者网络带宽。既然单线程容易实现，而且 cpu 又不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p><p>关于 Redis 的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。</p><p>而且单线程并不代表就慢 nginx 和 nodejs 也都是高性能单线程的代表。</p><p>183、什么是缓存穿透？怎么解决？</p><p>缓存穿透：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p><p>解决方案：最简单粗暴的方法如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们就把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><p>184、reids支持的数据类型有哪些？</p><ul><li>String</li><li>List</li><li>Hash</li><li>Set</li><li>Zset</li></ul><p>185、redis支持的java客户端有哪些？</p><p>Redisson、Jedis、Lettuce等等，官方推荐使用Redisson</p><p>186、Jedis和redisson有哪些区别？</p><p>Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持。</p><p>Redisson实现了分布式和可扩展的Java数据结构，和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><p>187、怎样保证缓存和数据库数据的一致性？</p><ul><li>合理设置缓存过期时间</li><li>新增、更改、删除数据库操作同步更新Redis，可以使用事务机制来保证数据的一致性</li></ul><p>188、Redis持久化有几种方式？</p><p>Redis 的持久化有两种方式，或者说有两种策略：</p><ul><li>RDB（Redis Database）：指定的时间间隔能对你的数据进行快照存储。</li><li>AOF（Append Only File）：每一个收到的写命令都通过write函数追加到文件中。</li></ul><p>189、Redis怎么实现分布式锁？</p><p>Redis 分布式锁其实就是在系统里面占一个“坑”，其他程序也要占“坑”的时候，占用成功了就可以继续执行，失败了就只能放弃或稍后重试。</p><p>占坑一般使用 setnx(set if not exists)指令，只允许被一个程序占有，使用完调用 del 释放锁。</p><p><strong>190、Redis分布式锁有什么缺陷？</strong></p><p>Redis 分布式锁不能解决超时的问题，分布式锁有一个超时时间，程序的执行如果超出了锁的超时时间就会出现问题。</p><p>191、Redis如何做内存优化？</p><p>尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。</p><p>比如你的web系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的key,而是应该把这个用户的所有信息存储到一张散列表里面。</p><p>192、Redis淘汰策略有哪些？</p><p>volatile-lru：从已设置过期时间的数据集（server. db[i]. expires）中挑选最近最少使用的数据淘汰。</p><p>volatile-ttl：从已设置过期时间的数据集（server. db[i]. expires）中挑选将要过期的数据淘汰。</p><p>volatile-random：从已设置过期时间的数据集（server. db[i]. expires）中任意选择数据淘汰</p><p>allkeys-lru：从数据集（server. db[i]. dict）中挑选最近最少使用的数据淘汰</p><p>allkeys-random：从数据集（server. db[i]. dict）中任意选择数据淘汰</p><p>no-enviction（驱逐）：禁止驱逐数据</p><p>193、Redis常见的性能问题有哪些？该如何解决？</p><ul><li>主服务器写内存快照，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以主服务器最好不要写内存快照。</li><li>Redis 主从复制的性能问题，为了主从复制的速度和连接的稳定性，主从库最好在同一个局域网内。</li></ul><h2 id="十九、JVM"><a href="#十九、JVM" class="headerlink" title="十九、JVM"></a>十九、JVM</h2><p>194、说一下jvm的主要组成部分及其作用？</p><ul><li>类加载器（ClassLoader）</li><li>运行时数据区（Runtime Data Area）</li><li>执行引擎（Execution Engine）</li><li>本地库接口（Native Interface）</li></ul><p>组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交个底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p><p>195、说一下jvm运行时数据区</p><ul><li>程序计数器</li><li>虚拟机栈</li><li>本地方法栈</li><li>堆</li><li>方法区</li></ul><p>有的区域随着虚拟机进程的启动而存在，有的区域则依赖用户进程的启动和结束而创建和销毁。</p><p><img src="http://ww4.sinaimg.cn/large/006y8mN6gy1g6ncixfpynj30d70b2t9b.jpg" alt="image-20190904115548644"></p><p>196、说一下堆栈的区别？</p><ol><li>栈内存存储的是局部变量而堆内存存储的是实体；</li><li>栈内存的更新速度要快于堆内存，因为局部变量的生命周期很短；</li><li>栈内存存放的变量生命周期一旦结束就会被释放，而堆内存存放的实体会被垃圾回收机制不定时的回收。</li></ol><p>197、队列和栈是什么？有什么区别？</p><ul><li>队列和栈都是被用来预存储数据的。</li><li>队列允许先进先出检索元素，但也有例外的情况，Deque 接口允许从两端检索元素。</li><li>栈和队列很相似，但它运行对元素进行后进先出进行检索。</li></ul>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据时代</title>
      <link href="2019/08/03/redis-data/"/>
      <url>2019/08/03/redis-data/</url>
      
        <content type="html"><![CDATA[<h2 id="大数据时代三V"><a href="#大数据时代三V" class="headerlink" title="大数据时代三V"></a>大数据时代三V</h2><ul><li>海量</li><li>多样</li><li>实时</li></ul><h2 id="互联网时代3高"><a href="#互联网时代3高" class="headerlink" title="互联网时代3高"></a>互联网时代3高</h2><ul><li>高并发</li><li>高可扩</li><li>高性能</li></ul><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><p><code>./redis-trib.rb reshard 127.0.0.1:8001</code></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java技术栈</title>
      <link href="2019/08/02/technology-stack/"/>
      <url>2019/08/02/technology-stack/</url>
      
        <content type="html"><![CDATA[<ul><li>Docker</li><li>Nginx</li><li>Redis</li><li>SpringBoot</li><li>Mybatis</li><li>RabbitMQ</li><li>Websock</li><li>Spring Security</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聚集函数</title>
      <link href="2019/08/02/sql-learn/"/>
      <url>2019/08/02/sql-learn/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL聚集函数"><a href="#SQL聚集函数" class="headerlink" title="SQL聚集函数"></a>SQL聚集函数</h2><ul><li>AVG()  返回某列的平均值</li><li>COUNT()   返回牟烈的行数</li><li>MAX()     返回某列的最大值</li><li>MIN()  返回某列的最小值</li><li>SUM()    返回某列的求和</li></ul><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlLearning</title>
      <link href="2019/07/29/sqllearning/"/>
      <url>2019/07/29/sqllearning/</url>
      
        <content type="html"><![CDATA[<h1 id="基本字符匹配"><a href="#基本字符匹配" class="headerlink" title="基本字符匹配"></a>基本字符匹配</h1><h2 id="MySQL使用-Concat-来完成对字段的拼接"><a href="#MySQL使用-Concat-来完成对字段的拼接" class="headerlink" title="MySQL使用 Concat 来完成对字段的拼接"></a>MySQL使用 Concat 来完成对字段的拼接</h2><p>Concat ()</p><p><code>select Concat(vend_name,'()',vend_country,')') from vendors order by vend_name</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBootAnnotation</title>
      <link href="2019/07/25/springbootannotation/"/>
      <url>2019/07/25/springbootannotation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL性能优化</title>
      <link href="2019/07/24/sql-1/"/>
      <url>2019/07/24/sql-1/</url>
      
        <content type="html"><![CDATA[<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ol><li>尽量不使用IN,而采用exists </li><li>模糊查询like, 关键词前面不要使用% 比如’%xxx%’ 会导致查询走权标扫描</li><li>尽量使用where过滤之后再分组 </li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用封装类进行数据转换</title>
      <link href="2019/07/16/stringnum/"/>
      <url>2019/07/16/stringnum/</url>
      
        <content type="html"><![CDATA[<h1 id="使用封装类进行数据转换"><a href="#使用封装类进行数据转换" class="headerlink" title="使用封装类进行数据转换"></a>使用封装类进行数据转换</h1><p>我们平时在数据库中,存放物品使用varchar来存放,当需要做加减乘除运算时,需要将String类型转换成int(或float或long)类型,以下通过Integer,Float,Long封装类来String进行转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringNum</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> num <span class="token operator">=</span> <span class="token string">"998"</span><span class="token punctuation">;</span>        <span class="token comment">//通过Integer实现数据转换</span>        <span class="token keyword">int</span> intValue <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>intValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过Float进行数据转换</span>        <span class="token keyword">float</span> floValue <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>floValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过Long封装类进行数据转换</span>        <span class="token class-name">Long</span> longValue <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>longValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LinkTest</title>
      <link href="2019/07/16/linktest/"/>
      <url>2019/07/16/linktest/</url>
      
        <content type="html"><![CDATA[<h1 id="LinkList基本用法"><a href="#LinkList基本用法" class="headerlink" title="LinkList基本用法"></a>LinkList基本用法</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//插入元素</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"firstElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"secondElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//访问索引</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"firstElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"secondElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the index of firstElement is:"</span><span class="token operator">+</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the index of secondElement is:"</span><span class="token operator">+</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除元素</span>        <span class="token comment">//根据元素来删除</span>        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"firstElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据索引删除</span>        <span class="token class-name">String</span> remove <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除的元素:"</span><span class="token operator">+</span>remove<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//清空链表</span>        list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firstElementsecondElementthe index of firstElement is:0the index of secondElement is:1删除的元素:secondElementelement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LearnDocker</title>
      <link href="2019/07/14/learndocer/"/>
      <url>2019/07/14/learndocer/</url>
      
        <content type="html"><![CDATA[<h2 id="learn-docker"><a href="#learn-docker" class="headerlink" title="learn docker"></a>learn docker</h2><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p><code>docker version</code>  查看docker客户端和服务的版本</p><p><code>docker info</code> 查看docker的基本信息,例如有多少容器,多少镜像,docker个目录等</p><p><code>docker —help</code> 查看docker的帮助信息</p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ol><li><p><code>docker images</code> 查看本地主机上的所有镜像</p></li><li><p><code>docker rmi</code> 删除本地的镜像, 可以加上<code>-f</code> 参数进行强制删除</p><p><code>$ docker rmi -f tomcat</code></p></li><li><p><code>docker search</code> 根据镜像名称搜索远程仓库中的镜像</p></li><li><p><code>docker pull</code> 搜索到某个镜像之后可以从远程拉取镜像,类似github的pull功能</p></li></ol><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><ol><li><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>  可以基于某个镜像运行一个容器</li></ol><blockquote><p><code>-d</code>:启动容器,并且后台运行<br><code>-i</code>:以交互模式运行容器<br><code>-t</code>:为容器重新分配一个伪输入终端<br><code>-P</code>:随机端口映射<br><code>-p</code>:指定端口映射<br><code>-v</code>:建立宿主机与容器目录的同步<br><code>--name="myTomcat"</code>为容器指定一个名称(如果不指定,则有个随机的名字)</p></blockquote><ol><li>进入容器后可以通过<code>exit</code>命令退出容器</li><li><code>docker ps</code> 通过该命令可查看正在运行的容器信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="1984/01/24/sql/"/>
      <url>1984/01/24/sql/</url>
      
        <content type="html"><![CDATA[<hr><p>title: SQL性能优化<br>date: 2019-07-24 06:11:00<br>tags:<br>–</p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ol><li>尽量不使用IN,而采用exists </li><li>模糊查询like, 关键词前面不要使用% 比如’%xxx%’ 会导致查询走权标扫描</li><li>尽量使用where过滤之后再分组 </li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="1984/01/24/untitled/"/>
      <url>1984/01/24/untitled/</url>
      
        <content type="html"><![CDATA[<ol><li>在 where 子句中对字段进行 null 值判断、对字段进行表达式操作、使用 != 或者 &lt;&gt; 、或则对字段进行函数操作，都会引发全表扫描，相当于你配置的索引没有生效，另外也要尽量避免使用 or ，这样如果一个条件没有索引，则也会导致全表扫描；</li><li>在使用索引字段作为条件时，如果该索引是复合索引，则必须使用到该索引中的第一个字段作为条件才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致；</li><li>使用like关键字模糊查询时，% 放在前面索引不起作用，只有“%”不在第一个位置，索引才会生效（like ‘%文’–索引不起作用），数据量巨大的模糊查询，可以考虑上 es。</li><li>如果列类型是字符串，那一定要在条件中将数据使用引号引用起来,否则索引将会失效。</li><li>不在索引列上做任何操作，例如 计算、函数运算、（自动or手动）类型转换</li><li>尽量使用覆盖索引（只访问索引的查询（索引和查询列一致）），减少select*。</li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
